{"somef_provenance": {"somef_version": "0.9.9", "somef_schema_version": "1.0.0", "date": "2025-05-11 23:58:35"}, "code_repository": [{"result": {"value": "https://github.com/athenarc/schema", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "owner": [{"result": {"value": "athenarc", "type": "Organization"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2020-09-16T13:32:48Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2023-03-08T11:47:43Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": "https://api.github.com/licenses/lgpl-3.0", "type": "License", "name": "GNU Lesser General Public License v3.0", "url": "https://api.github.com/licenses/lgpl-3.0", "spdx_id": "LGPL-3.0"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/athenarc/schema/main/LICENSE.md"}], "description": [{"result": {"value": "SCHeMa (Scheduler for scientific Containers on clusters of Heterogeneous Machines) is an open source platform to facilitate the execution and reproducibility of computational experiments on heterogeneous clusters.", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Text_excerpt", "value": "This helm chart includes the main SCHeMa web interface, along with a private docker registry, a postgres database server and an FTP server (for use by TESK). \n \n", "original_header": "Deploying with Helm (recommended)"}, "confidence": 0.8354878575496509, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/athenarc/schema/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "\nSCHeMa (Scheduler for scientific Containers on clusters of Heterogeneous Machines) is an open source platform to facilitate the execution and reproducibility of computational experiments on heterogeneous clusters. The platform exploits containerization, experiment packaging, and workflow management technologies to ease reproducibility, while it leverages machine learning technologies to automatically identify the type of node that is more suitable to undertake each submitted computational task. \n"}, "confidence": 0.9633408792765655, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/athenarc/schema/main/README.md"}], "name": [{"result": {"value": "schema", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "athenarc/schema", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/athenarc/schema/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/athenarc/schema/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 3, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "containerization, data-driven-science, kubernetes, reproducibility, schema, tesk, wes", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 9, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/athenarc/schema/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "PHP", "name": "PHP", "type": "Programming_language", "size": 924502}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Python", "name": "Python", "type": "Programming_language", "size": 156315}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "JavaScript", "name": "JavaScript", "type": "Programming_language", "size": 120931}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "CSS", "name": "CSS", "type": "Programming_language", "size": 65540}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Dockerfile", "name": "Dockerfile", "type": "Programming_language", "size": 3414}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Shell", "name": "Shell", "type": "Programming_language", "size": 1982}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Smarty", "name": "Smarty", "type": "Programming_language", "size": 1042}, "confidence": 1, "technique": "GitHub_API"}], "has_script_file": [{"result": {"value": "https://raw.githubusercontent.com/athenarc/schema/main/config-init.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "has_build_file": [{"result": {"value": "https://raw.githubusercontent.com/athenarc/schema/main/Dockerfile", "type": "Url", "format": "dockerfile"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/athenarc/schema/main/Dockerfile"}, {"result": {"value": "https://raw.githubusercontent.com/athenarc/schema/main/docker-compose.yml", "type": "Url", "format": "docker_compose"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/athenarc/schema/main/docker-compose.yml"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/athenarc/schema/main/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "continuous_integration": [{"result": {"value": "https://raw.githubusercontent.com/athenarc/schema/main/.github/workflows/pr-test.yml", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/athenarc/schema/main/.github/workflows/docker-publish.yml", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "requirements": [{"result": {"value": "In order to be able to install SCHeMa you need:\n* an operational Kubernetes cluster or minikube cluster ([tutorial](https://www.howtoforge.com/how-to-install-kubernetes-with-minikube-on-ubuntu-1804-lts/)) with metrics-server installed\n* a ReadWriteMany Kubernetes StorageClass (like NFS)\n* Helm v.3 and greater\n* a [cwl-WES](https://github.com/elixir-cloud-aai/cwl-WES) (see below) in k8s namespace ```wes``` and [TESK](https://github.com/EMBL-EBI-TSI/TESK) in k8s namespace ```tes```, for workflow and task execution respectively.\n* an [NGINX ingress controller](https://kubernetes.github.io/ingress-nginx/deploy/) with [cert-manager](https://cert-manager.io/docs/installation/kubernetes/) installed (see here: https://dev.to/chrisme/setting-up-nginx-ingress-w-automatically-generated-letsencrypt-certificates-on-kubernetes-4f1k)\n", "type": "Text_excerpt", "original_header": "Prerequisites", "parent_header": ["Installing on a dedicated machine (Deprecated)"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/athenarc/schema/main/README.md"}], "installation": [{"result": {"value": "The node running the installation of SCHeMa should have the following PHP packages installed:\n* php-mbstring\n* php-xml\n* php-gd\n* php-pgsql\n* php-yaml\n", "type": "Text_excerpt", "original_header": "Required PHP packages", "parent_header": ["Installing on a dedicated machine (Deprecated)"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/athenarc/schema/main/README.md"}, {"result": {"value": "The node running the installation of SCHeMa should have the following Python packages installed:\n* python3-ruamel.yaml\n* python3-psycopg2\n* python3-yaml\n* python3-requests\n* rocrate (install with pip3)\n* python3-sklearn\n* dockertarpusher (install with pip3)\n", "type": "Text_excerpt", "original_header": "Required Python packages", "parent_header": ["Installing on a dedicated machine (Deprecated)"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/athenarc/schema/main/README.md"}, {"result": {"value": "* cwltool\n* graphviz\n\n", "type": "Text_excerpt", "original_header": "Other packages required:", "parent_header": ["Installing on a dedicated machine (Deprecated)"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/athenarc/schema/main/README.md"}, {"result": {"value": "On the machine that will run the SCHeMa installation:\n1. Create a folder for the registry certificates and authentication files (e.g. /data/registry) with two additional directories, \"certs\" and reg_auth\".\n2. Create self-signed certificates:\n```bash\nopenssl req \\\n  -newkey rsa:4096 -nodes -sha256 -keyout <registry_data_directory>/certs/domain.key \\\n  -x509 -days 365 -out <registry_data_directory>/certs/domain.crt\n````\n3. Create a username and password for the registry (change ```<registry_username>``` and ```<registry_username>``` appropriately):\n```bash\nsudo docker run -it --entrypoint htpasswd -v $PWD/reg_auth:/auth -w /auth registry:2 -Bbc /auth/htpasswd <registry_username> <registry_password>\n```\n4. Start the registry with the created certificates:\n```bash\n  docker run -d \\\n  --restart=always \\\n  --name registry \\\n  -v \"$(pwd)\"/certs:/certs \\\n  -v \"$(pwd)\"/reg_auth:/auth \\\n  -e REGISTRY_HTTP_ADDR=0.0.0.0:5000 \\\n  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \\\n  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \\\n  -e \"REGISTRY_AUTH=htpasswd\" \\\n  -e \"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm\" \\\n  -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \\\n  -e REGISTRY_STORAGE_DELETE_ENABLED=true \\\n  -p 5000:5000 \\\n  registry:2\n```\n5. Create folders with the certificate for the docker registry and copy the certificates:\n```bash\nsudo mkdir -p /etc/docker/certs.d/127.0.0.1:5000\nsudo mkdir -p /etc/docker/certs.d/localhost:5000\nsudo cp <registry_data_directory>/certs/domain.crt /etc/docker/certs.d/127.0.0.1:5000/ca.crt\nsudo cp <registry_data_directory>/certs/domain.crt /etc/docker/certs.d/localhost:5000/ca.crt\n```\n6. Login to the registry:\n```bash\ndocker login 127.0.0.1:5000 -u <registry_username> -p pass <registry_password>\n```\n7. Create a Kubernetes secret named `docker-secret` with your Docker login. This is so that Kubernetes can retrieve images from your private registry:\n```bash\nkubectl create secret docker-registry --docker-server <docker-registry-ip> --docker-username <registry_username> --docker-password <registry_password>\n```\n", "type": "Text_excerpt", "original_header": "Installing a local docker registry with self-signed certificates and basic authentication"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/athenarc/schema/main/README.md"}, {"result": {"value": "1. Install the Yii2 framework([tutorial](https://www.yiiframework.com/doc/guide/2.0/en/start-installation)) and install the following plugins:\n  * [Webvimark User management](https://github.com/webvimark/user-management) without migrating the database.\n  * [DatePicker](https://demos.krajee.com/widget-details/datepicker)\n  * [Yii2 Bootstrap4](https://github.com/yiisoft/yii2-bootstrap4)\n  * [Yii http requests](https://github.com/yiisoft/yii2-httpclient)\n  * [elFinder](https://github.com/alexantr/yii2-elfinder)\n  * [ckeditor](https://github.com/2amigos/yii2-ckeditor-widget)\n\n2. Download the SCHeMa code from GitHub and replace the files inside the Yii project folder.\n\n3. Create a postgres database named \"schema\" for user \"schema\".\n\n4. Restore the .sql file inside the \"database_schema\" folder as user \"postgres\" to the database created in the previous step:\n  ```sudo -u postgres psql -d schema -f <path_to_database_schema>/database_schema.sql```\n\n5. Copy the docker registry certificates in the project_root/scheduler_files/certificates:\n```cp <registry_data_directory>/certs/* <path_to_schema_project>/scheduler_files/certificates```\n\n6. Using root permissions create an empty file inside /etc/sudoers.d/ with ```visudo``` and paste the following inside it after filling the relevant information:\n```bash\nwww-data ALL=(<user>) NOPASSWD: <path-to-kubectl>, <path-to-docker>, <path_to_schema_project>/scheduler_files/scheduler.py, <path_to_schema_project>/scheduler_files/ontology/initialClassify.py, <path_to_schema_project>/scheduler_files/imageUploader.py, <path_to_schema_project>/scheduler_files/imageRemover.py, <path_to_schema_project>/scheduler_files/inputReplacer.py, <path_to_schema_project>/scheduler_files/probe_stats.py, <path_to_schema_project>/scheduler_files/setupMpiCluster.py, <path_to_schema_project>/scheduler_files/mpiMonitorAndClean.py, <path_to_schema_project>/scheduler_files/existingImageUploader.py, <path_to_schema_project>/scheduler_files/workflowMonitorAndClean.py, <path_to_schema_project>/scheduler_files/workflowUploader.py, <path_to_cwltool>/cwltool\n```\n  where ```<user>```: a user that has permissions to run path-to-kubectl. As an example take a look at the following\n\n```bash\n  www-data ALL=(ubuntu) NOPASSWD: /usr/bin/kubectl, /data/www/schema/scheduler_files/scheduler.py, /data/www/schema/scheduler_files/ontology/initialClassify.py, /data/www/schema/scheduler_files/imageUploader.py, /data/www/schema/scheduler_files/imageRemover.py, /data/www/schema/scheduler_files/inputReplacer.py, /data/www/schema/scheduler_files/probe_stats.py, /data/www/schema/scheduler_files/setupMpiCluster.py,/data/www/schema/scheduler_files/mpiMonitorAndClean.py, /data/www/schema/scheduler_files/existingImageUploader.py, /data/www/schema/scheduler_files/workflowMonitorAndClean.py, /data/www/schema/scheduler_files/workflowUploader.py\n```\n\n  This will allow www-data to run kubectl and the python scripts inside the folder as the user you have selected.\n\n7. Inside the project folder change the following files according to the database and Docker registry configuration:\n  * scheduler_files/configuration.json using the template found at scheduler_files/configuration-template.json and fill the appropriate details.\n  * config/db.php and fill the details for the database (for details see the Yii2 documentation)\n  * config/params.php and fill the following details according to your configuration (you can use params-template.php):\n\n8. Create a new namespace in Kubernetes for the Open MPI Cluster:\n```bash\nkubectl create namespace mpi-cluster\n```\n", "type": "Text_excerpt", "original_header": "Installing SCHeMa"}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/athenarc/schema/main/README.md"}], "application_domain": [{"result": {"type": "String", "value": "Semantic web"}, "confidence": 0.9206575801269524, "technique": "supervised_classification"}], "logo": [{"result": {"type": "Url", "value": "https://raw.githubusercontent.com/athenarc/schema/master/web/img/schema-logo2.png"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/athenarc/schema/main/README.md"}], "related_papers": [{"result": {"type": "Url", "value": "https://arxiv.org/abs/2103.13138 (2021).\n\n## Deploying with Helm (recommended)\nThis helm chart includes the main SCHeMa web interface, along with a private docker registry, a postgres database server and an FTP server (for use by TESK). \n\n### Prerequisites\nIn order to be able to install SCHeMa you need:\n* an operational Kubernetes cluster or minikube cluster ([tutorial](https://www.howtoforge.com/how-to-install-kubernetes-with-minikube-on-ubuntu-1804-lts/)) with metrics-server installed\n* a ReadWriteMany Kubernetes StorageClass (like NFS)\n* Helm v.3 and greater\n* a [cwl-WES](https://github.com/elixir-cloud-aai/cwl-WES) (see below) in k8s namespace ```wes``` and [TESK](https://github.com/EMBL-EBI-TSI/TESK) in k8s namespace ```tes```, for workflow and task execution respectively.\n* an [NGINX ingress controller](https://kubernetes.github.io/ingress-nginx/deploy/) with [cert-manager](https://cert-manager.io/docs/installation/kubernetes/) installed (see here: https://dev.to/chrisme/setting-up-nginx-ingress-w-automatically-generated-letsencrypt-certificates-on-kubernetes-4f1k)\n\n### Deployment\n1. Create a new namespace (schema) with \n```bash \nkubectl create namespace schema\n```\n2. Edit ```deployment/values.yaml``` and fill the values appropriate for your installation in the following fields:\n\n| Name   | Description |\n| ------ | ----------- |\n| **domain** | The ingress domain name to deploy the apps |\n| **schema.volume.deploy\\_volume** | Whether to deploy a storage volume for the user data in SCHeMa |\n| **schema.volume.size** | size of the volume (e.g. 50Gi) |\n| **schema.volume.storageClass** | The name of the ReadWriteMany storageClass |\n| **postgres.volume.deploy\\_volume** | Whether to deploy a storage volume for the DB data |\n| **postgres.volume.size** | same as schema.volume.size for the DB volume |\n| **postgres.volume.storageClass** | Same as schema.volume.storageClass\n| **postgres.deployment.dbUsername** | Username of the DB user |\n| **postgres.deployment.dbPassword** | Password of the DB user |\n| **postgres.deployment.dbName** | Name of the DB |\n| **cluster\\_endpoint** | Endpoint of the Kubernetes api server (e.g. https://xxx.xxx.xxx.xxx:443)\n| **registry** | URL of the private registry |\n| **registry.data\\_volume.deploy\\_volume** | Whether to deploy a storage volume for the registry data |\n| **registry.data\\_volume.size** | same as schema.volume.size for the registry data volume |\n| **registry.data\\_volume.storageClass** | Same as schema.volume.storageClass for the registry data volume |\n| **registry.credentials\\_volume.deploy\\_volume** | Whether to deploy a storage volume for the registry authentication credentials |\n| **registry.credentials\\_volume.storageClass** | Same as schema.volume.storageClass |\n| **registry.credentials\\_volume.size** | We do not recommend anything greater than 10M  for this volume |\n| **registry.deployment.username** | Your registry username |\n| **registry.deployment.password** | Your registry password |\n| **ftp.deployment.username** | Your FTP username |\n| **ftp.deployment.password** | Your FTP password |\n| **tesk.url** | The URL of your TESK installation |\n| **wes.url** | The URL of your cwl-WES installation |\n| **standalone.isStandalone** | Leave to \"true\" (unless you are running the [CLIMA](https://github.com/athenarc/clima) project management system.) |\n| **standalone.Resources** | Maximum resources for job pods when running in standalone mode |\n| **metrics.url** | Link to a metrics server dashboard of your choice (leave blank if not available) |\n\nNote: you can either create Persistent Volume Claims (PVC) with the appropriate names in ```values.yaml``` or you can allow the helm chart to create them automatically.\n\n3. Deploy the Helm chart with \n```bash\nhelm install schema-app deployment -f deployment/values.yaml\n```\n\n4. Create the database structure and add required data:\n```bash\nkubectl -n schema exec -it <schema-pod-id> -- psql -h postgres -U <your-db-username> -d <your-db-name> -f /app/web/schema/database_schema/schema_db.sql\n```\n5. Run the same command for all migration files ```/app/web/schema/database-schema/migration-xx.sql``` in order. If you are upgrading to the latest version of SCHeMa, please run the migration files that have been published since the last version.\n\nAfter all steps have been completed the app should be running as expected. By default a superadministrator account is created and you can login using \"superadmin\" as username and password. Please change it as soon as possible after logging in. \n\n\n## Installing on a dedicated machine (Deprecated)\n### Prerequisites\nIn order to install SCHeMa you need:\n* an operational Kubernetes cluster or minikube cluster ([tutorial](https://www.howtoforge.com/how-to-install-kubernetes-with-minikube-on-ubuntu-1804-lts/)) with metrics-server installed\n* a docker registry configured with TLS and basic authentication (or see below for installation instructions for a private local registry)\n* an Apache server with PHP 7.2 installed on the cluster master or another machine that has access to the \"kubectl\" command\n* a PostgreSQL database server\n* python 3 and docker installed\n* a local directory exposed via NFS (called local NFS from here on) to the cluster so that Kubernetes pods can read/write data from/on it ([tutorial](https://help.ubuntu.com/community/SettingUpNFSHowTo))\n* a system user with sudo permissions that is able to run docker and kubectl without using sudo.\n* a [cwl-WES](https://github.com/elixir-cloud-aai/cwl-WES) (see below) in k8s namespace ```wes``` and [TESK](https://github.com/EMBL-EBI-TSI/TESK) in k8s namespace ```tes```, for workflow and task execution respectively.\n* a ReadWriteMany Kubernetes StorageClass (like NFS) for cwl-WES and TESK.\n\n### Required PHP packages\nThe node running the installation of SCHeMa should have the following PHP packages installed:\n* php-mbstring\n* php-xml\n* php-gd\n* php-pgsql\n* php-yaml\n\n### Required Python packages\nThe node running the installation of SCHeMa should have the following Python packages installed:\n* python3-ruamel.yaml\n* python3-psycopg2\n* python3-yaml\n* python3-requests\n* rocrate (install with pip3)\n* python3-sklearn\n* dockertarpusher (install with pip3)\n\n### Other packages required:\n* cwltool\n* graphviz\n\n\n## Installing a local docker registry with self-signed certificates and basic authentication\nOn the machine that will run the SCHeMa installation:\n1. Create a folder for the registry certificates and authentication files (e.g. /data/registry) with two additional directories, \"certs\" and reg_auth\".\n2. Create self-signed certificates:\n```bash\nopenssl req \\\n  -newkey rsa:4096 -nodes -sha256 -keyout <registry_data_directory>/certs/domain.key \\\n  -x509 -days 365 -out <registry_data_directory>/certs/domain.crt\n````\n3. Create a username and password for the registry (change ```<registry_username>``` and ```<registry_username>``` appropriately):\n```bash\nsudo docker run -it --entrypoint htpasswd -v $PWD/reg_auth:/auth -w /auth registry:2 -Bbc /auth/htpasswd <registry_username> <registry_password>\n```\n4. Start the registry with the created certificates:\n```bash\n  docker run -d \\\n  --restart=always \\\n  --name registry \\\n  -v \"$(pwd)\"/certs:/certs \\\n  -v \"$(pwd)\"/reg_auth:/auth \\\n  -e REGISTRY_HTTP_ADDR=0.0.0.0:5000 \\\n  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \\\n  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \\\n  -e \"REGISTRY_AUTH=htpasswd\" \\\n  -e \"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm\" \\\n  -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \\\n  -e REGISTRY_STORAGE_DELETE_ENABLED=true \\\n  -p 5000:5000 \\\n  registry:2\n```\n5. Create folders with the certificate for the docker registry and copy the certificates:\n```bash\nsudo mkdir -p /etc/docker/certs.d/127.0.0.1:5000\nsudo mkdir -p /etc/docker/certs.d/localhost:5000\nsudo cp <registry_data_directory>/certs/domain.crt /etc/docker/certs.d/127.0.0.1:5000/ca.crt\nsudo cp <registry_data_directory>/certs/domain.crt /etc/docker/certs.d/localhost:5000/ca.crt\n```\n6. Login to the registry:\n```bash\ndocker login 127.0.0.1:5000 -u <registry_username> -p pass <registry_password>\n```\n7. Create a Kubernetes secret named `docker-secret` with your Docker login. This is so that Kubernetes can retrieve images from your private registry:\n```bash\nkubectl create secret docker-registry --docker-server <docker-registry-ip> --docker-username <registry_username> --docker-password <registry_password>\n```\n\n## Installing SCHeMa\n\n1. Install the Yii2 framework([tutorial](https://www.yiiframework.com/doc/guide/2.0/en/start-installation)) and install the following plugins:\n  * [Webvimark User management](https://github.com/webvimark/user-management) without migrating the database.\n  * [DatePicker](https://demos.krajee.com/widget-details/datepicker)\n  * [Yii2 Bootstrap4](https://github.com/yiisoft/yii2-bootstrap4)\n  * [Yii http requests](https://github.com/yiisoft/yii2-httpclient)\n  * [elFinder](https://github.com/alexantr/yii2-elfinder)\n  * [ckeditor](https://github.com/2amigos/yii2-ckeditor-widget)\n\n2. Download the SCHeMa code from GitHub and replace the files inside the Yii project folder.\n\n3. Create a postgres database named \"schema\" for user \"schema\".\n\n4. Restore the .sql file inside the \"database_schema\" folder as user \"postgres\" to the database created in the previous step:\n  ```sudo -u postgres psql -d schema -f <path_to_database_schema>/database_schema.sql```\n\n5. Copy the docker registry certificates in the project_root/scheduler_files/certificates:\n```cp <registry_data_directory>/certs/* <path_to_schema_project>/scheduler_files/certificates```\n\n6. Using root permissions create an empty file inside /etc/sudoers.d/ with ```visudo``` and paste the following inside it after filling the relevant information:\n```bash\nwww-data ALL=(<user>) NOPASSWD: <path-to-kubectl>, <path-to-docker>, <path_to_schema_project>/scheduler_files/scheduler.py, <path_to_schema_project>/scheduler_files/ontology/initialClassify.py, <path_to_schema_project>/scheduler_files/imageUploader.py, <path_to_schema_project>/scheduler_files/imageRemover.py, <path_to_schema_project>/scheduler_files/inputReplacer.py, <path_to_schema_project>/scheduler_files/probe_stats.py, <path_to_schema_project>/scheduler_files/setupMpiCluster.py, <path_to_schema_project>/scheduler_files/mpiMonitorAndClean.py, <path_to_schema_project>/scheduler_files/existingImageUploader.py, <path_to_schema_project>/scheduler_files/workflowMonitorAndClean.py, <path_to_schema_project>/scheduler_files/workflowUploader.py, <path_to_cwltool>/cwltool\n```\n  where ```<user>```: a user that has permissions to run path-to-kubectl. As an example take a look at the following\n\n```bash\n  www-data ALL=(ubuntu) NOPASSWD: /usr/bin/kubectl, /data/www/schema/scheduler_files/scheduler.py, /data/www/schema/scheduler_files/ontology/initialClassify.py, /data/www/schema/scheduler_files/imageUploader.py, /data/www/schema/scheduler_files/imageRemover.py, /data/www/schema/scheduler_files/inputReplacer.py, /data/www/schema/scheduler_files/probe_stats.py, /data/www/schema/scheduler_files/setupMpiCluster.py,/data/www/schema/scheduler_files/mpiMonitorAndClean.py, /data/www/schema/scheduler_files/existingImageUploader.py, /data/www/schema/scheduler_files/workflowMonitorAndClean.py, /data/www/schema/scheduler_files/workflowUploader.py\n```\n\n  This will allow www-data to run kubectl and the python scripts inside the folder as the user you have selected.\n\n7. Inside the project folder change the following files according to the database and Docker registry configuration:\n  * scheduler_files/configuration.json using the template found at scheduler_files/configuration-template.json and fill the appropriate details.\n  * config/db.php and fill the details for the database (for details see the Yii2 documentation)\n  * config/params.php and fill the following details according to your configuration (you can use params-template.php):\n\n8. Create a new namespace in Kubernetes for the Open MPI Cluster:\n```bash\nkubectl create namespace mpi-cluster\n```"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/athenarc/schema/main/README.md"}]}