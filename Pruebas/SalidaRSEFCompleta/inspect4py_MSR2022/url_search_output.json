[
    {
        "title": "Inspect4py: A Knowledge Extraction Framework for Python Code",
        "implementation_urls": [],
        "abstract": "ABSTRACTThis work presents inspect4py, a static code analysis frameworkdesigned to automatically extract the main features, metadata anddocumentation of Python code repositories. Given an input folderwith code, inspect4py uses abstract syntax trees and state of theart tools to find all functions, classes, tests, documentation, callgraphs, module dependencies and control flows within all code filesin that repository. Using these findings, inspect4py infers differ-ent ways of invoking a software component. We have evaluatedour framework on 95 annotated repositories, obtaining promisingresults for software type classification (over 95% F1-score). Withinspect4py, we aim to ease the understandability and adoption ofsoftware repositories by other researchers and developers.Code: https://github.com/SoftwareUnderstanding/inspect4pyDOI: https://doi.org/10.5281/zenodo.5907936License: Open (BSD3-Clause)CCS CONCEPTS• General and reference → Surveys and overviews; • Appliedcomputing → Document capture; Document analysis.KEYWORDSCode mining, software code, software classification, software docu-mentation, code understandingACM Reference Format:Rosa Filgueira and Daniel Garijo. 2022. Inspect4py: A Knowledge ExtractionFramework for PythonCode Repositories. In 19th International Conference onMining Software Repositories (MSR ’22), May 23–24, 2022, Pittsburgh, PA, USA.ACM, New York, NY, USA, 5 pages. https://doi.org/10.1145/3524842.35284971 INTRODUCTIONAn increasing number of research results depend on software, inareas ranging from High-Energy Physics [15] to ComputationalBiology [12]. Research software is used to clean and analyze data,simulate real systems or visualize scientific results [3].In the last years, research software has become a subject ofinterest for the scientific community for two main reasons. First,software itself has become a research topic, with multiple researchPermission to make digital or hard copies of all or part of this work for personal orclassroom use is granted without fee provided that copies are not made or distributedfor profit or commercial advantage and that copies bear this notice and the full citationon the first page. Copyrights for components of this work owned by others than ACMmust be honored. Abstracting with credit is permitted. To copy otherwise, or republish,to post on servers or to redistribute to lists, requires prior specific permission and/or afee. Request permissions from permissions@acm.org.MSR ’22, May 23–24, 2022, Pittsburgh, PA, USA© 2022 Association for Computing Machinery.ACM ISBN 978-1-4503-9303-4/22/05. . . $15.00https://doi.org/10.1145/3524842.3528497challenges such as using efficient code representations [14] forfunction similarity [7] or generating documentation from code [4].Second, the importance of software for Science has promoted theworldwide adoption of the Findable, Accessible, Interoperable and",
        "file_name": "20250511235523.pdf",
        "file_path": "../Pruebas/SalidaRSEFCompleta/inspect4py_MSR2022/PDFs/20250511235523.pdf",
        "pdf_link": "https://dgarijo.com/papers/inspect4py_MSR2022.pdf"
    }
]