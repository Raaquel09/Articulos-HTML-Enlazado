{"somef_provenance": {"somef_version": "0.9.9", "somef_schema_version": "1.0.0", "date": "2025-05-12 00:21:13"}, "code_repository": [{"result": {"value": "https://github.com/opencitations/ramose", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "https://github.com/opencitations/ramose/", "type": "Url"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}], "owner": [{"result": {"value": "opencitations", "type": "Organization"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2018-05-24T19:46:19Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2024-12-30T22:23:36Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": "https://api.github.com/licenses/isc", "type": "License", "name": "ISC License", "url": "https://api.github.com/licenses/isc", "spdx_id": "ISC"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "ISC", "spdx_id": "ISC", "type": "License"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"value": "ISC License (ISC)\n\nCopyright 2018 Silvio Peroni (essepuntato@gmail.com)\n\nPermission to use, copy, modify, and/or distribute this software for\nany purpose with or without fee is hereby granted, provided that the\nabove copyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT\nOF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/LICENSE"}], "description": [{"result": {"value": "RAMOSE is an application for creating REST APIs on top of SPARQL endpoints", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Restful API Manager Over SPARQL Endpoints (RAMOSE) is an application that allows agile development and publication of documented RESTful APIs for querying SPARQL endpoints, according to a particular specification document.", "type": "String"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"type": "Text_excerpt", "value": "Restful API Manager Over SPARQL Endpoints (RAMOSE) is an application that allows agile development and publication of documented RESTful APIs for querying SPARQL endpoints, according to a particular specification document.\n \n", "original_header": "Restful API Manager Over SPARQL Endpoints (RAMOSE)"}, "confidence": 0.9483095143559499, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "RAMOSE application accepts the following arguments:\n```\n    -h, --help            show this help message and exit\n    -s SPEC, --spec SPEC  The file in hashformat containing the specification of the API.\n    -m METHOD, --method METHOD\n                          The method to use to make a request to the API.\n    -c CALL, --call CALL  The URL to call for querying the API.\n    -f FORMAT, --format FORMAT\n                          The format in which to get the response.\n    -d, --doc             Say to generate the HTML documentation of the API (if it is specified, all the arguments '-m', '-c', and '-f' won't be considered).\n    -o OUTPUT, --output OUTPUT\n                          A file where to store the response.\n    -w WEBSERVER, --webserver WEBSERVER\n                          The host:port where to deploy a Flask webserver for testing the API.\n    -css CSS, --css CSS   The path of a .css file for styling the API documentation (to be specified either with '-w' or with '-d' and '-o' arguments).\n```\n \n", "original_header": "Arguments"}, "confidence": 0.8536256500515154, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "A hashformat file (`.hf`) is a specification file that includes metadata about an API, the operations it allows to perform, descriptions, and instructions to perform operations over a SPARQL endpoint. The `.hf` file is parsed by RAMOSE to perform requested operations and generate the documentation of the API. \nThe syntax is based on a simplified version of markdown and it includes one or more sections, separated by a empty line.\n```\n#<field_name_1> <field_value_1>\n#<field_name_1> <field_value_2>\n#<field_name_3> <field_value_3>\n\n#<field_name_n> <field_value_n>\n...\n```\nThe first section of the specification includes mandatory information about the API, namely:\n```\n#url <api_base>                     _partial URL of the API_\n#type api                           _the type of section_\n#base <base_url>                    _URL base_\n#method <get|post>                  \n#title <api_title>                  \n#description <api_description>\n#version <version_number>\n#license <license>\n#contacts <contact_url>             _in the form [text](url)_\n#endpoint <sparql_endpoint_url>     \n#addon <addon_file_name>            _optional additional python module_\n```\n \nFor example:\n```\n#url /api/v1\n#type api\n#base https://w3id.org/oc/wikidata\n#method post\n#title Wikidata REST API\n#description A RAMOSE API implementation for Wikidata\n#version 0.0.2\n#license This document is licensed with a [Creative Commons Attribution 4.0 International License](https://creativecommons.org/licenses/by/4.0/legalcode), while the REST API itself has been created using [RAMOSE](https://github.com/opencitations/ramose), the *Restful API Manager Over SPARQL Endpoints* created by [Silvio Peroni](https://orcid.org/0000-0003-0530-4305), which is licensed with an [ISC license](https://opensource.org/licenses/ISC). All the data returned by this API are made freely available under a [Creative Commons public domain dedication (CC0)](https://creativecommons.org/publicdomain/zero/1.0/).\n#contacts [contact@opencitations.net](mailto:contact@opencitations.net)\n#endpoint https://query.wikidata.org/sparql\n#addon test_addon\n```\n \n", "original_header": "Hashformat configuration file"}, "confidence": 0.8659100858366179, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "These functions can take parameters as input, while the first unspecified parameters will be always the result table. It is worth mentioning that this result table (i.e. a list of tuples) actually contains, in each cell, a tuple defining the plain value as well as the typed value for enabling better comparisons and operations if needed. An example of this table of result is shown as follows:\n```\n    [\n        (\"id\", \"date\"),\n        (\"my_id_1\", \"my_id_1\"), (datetime(2018, 3, 2), \"2018-03-02\"),\n        ...\n    ]\n```\n \n", "original_header": "Addon python files"}, "confidence": 0.9501472637796156, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/README.md"}, {"result": {"type": "Text_excerpt", "value": "The method `get_op(op_complete_url)` takes in input the url of the call (i.e. the API base URL plus the operation URL) and returns an object of type `Operation`. The instance of an `Operation` can be used to run the method `exec(method=\"get\", content_type=\"application/json\")`, which takes in input the url the HTTP method to use for the call and and the content type to return, and executes the operation as indicated in the specification file, by running (in the following order): \n  1. the methods to preprocess the query (as defined in the specification file at `#{var}` and `#preprocess`);\n  2. the SPARQL query related to the operation called, by using the parameters indicated in the URL (`#sparql`);\n  3. the specification of all the types of the various rows returned (`#field_type`);\n  4. the methods to postprocess the result (`#postprocess`);\n  5. the application of the filter to remove, filter, sort the result (parameters);\n  6. the removal of the types added at the step 3, so as to have a data structure ready to be returned;\n  7. the conversion in the format requested by the user (`content_type`). \n", "original_header": "RAMOSE `APIManager`"}, "confidence": 0.8821905021583631, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/README.md"}], "name": [{"result": {"value": "ramose", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "opencitations/ramose", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/opencitations/ramose/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/opencitations/ramose/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 25, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "linked-data-api, rest-api, semantic-web, sparql-endpoints", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "forks_count": [{"result": {"value": 4, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/opencitations/ramose/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "Python", "name": "Python", "type": "Programming_language", "size": 166175}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Jupyter Notebook", "name": "Jupyter Notebook", "type": "Programming_language", "size": 139862}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "HTML", "name": "HTML", "type": "Programming_language", "size": 34044}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Shell", "name": "Shell", "type": "Programming_language", "size": 1878}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Batchfile", "name": "Batchfile", "type": "Programming_language", "size": 969}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "CSS", "name": "CSS", "type": "Programming_language", "size": 64}, "confidence": 1, "technique": "GitHub_API"}], "releases": [{"result": {"type": "Release", "value": "https://api.github.com/repos/opencitations/ramose/releases/71004422", "tag": "v1.0.6", "name": "latest", "author": {"name": "dbrembilla", "type": "User"}, "description": "## What's Changed\r\n* Updated Ramose to 1.0.5 - corrected bugs, dependency problems, added tests by @dbrembilla in https://github.com/opencitations/ramose/pull/11\r\n\r\n## New Contributors\r\n* @dbrembilla made their first contribution in https://github.com/opencitations/ramose/pull/11\r\n\r\n**Full Changelog**: https://github.com/opencitations/ramose/compare/v1.0.4...v1.0.6", "tarball_url": "https://api.github.com/repos/opencitations/ramose/tarball/v1.0.6", "zipball_url": "https://api.github.com/repos/opencitations/ramose/zipball/v1.0.6", "html_url": "https://github.com/opencitations/ramose/releases/tag/v1.0.6", "url": "https://api.github.com/repos/opencitations/ramose/releases/71004422", "release_id": 71004422, "date_created": "2022-06-30T16:54:04Z", "date_published": "2022-06-30T17:40:39Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/opencitations/ramose/releases/52452379", "tag": "v1.0.4", "name": "v1.0.4", "author": {"name": "marilenadaquino", "type": "User"}, "description": " * minor fixes when parsing logs\r\n * flask app run in `debug=False` mode \r\n", "tarball_url": "https://api.github.com/repos/opencitations/ramose/tarball/v1.0.4", "zipball_url": "https://api.github.com/repos/opencitations/ramose/zipball/v1.0.4", "html_url": "https://github.com/opencitations/ramose/releases/tag/v1.0.4", "url": "https://api.github.com/repos/opencitations/ramose/releases/52452379", "release_id": 52452379, "date_created": "2021-11-01T14:39:48Z", "date_published": "2021-11-01T14:42:21Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/opencitations/ramose/releases/40544709", "tag": "v1.0.3", "name": "Release 1.0.3", "author": {"name": "essepuntato", "type": "User"}, "description": "Fixing some minor bugs about the documentation and the dimension of CSV fields.", "tarball_url": "https://api.github.com/repos/opencitations/ramose/tarball/v1.0.3", "zipball_url": "https://api.github.com/repos/opencitations/ramose/zipball/v1.0.3", "html_url": "https://github.com/opencitations/ramose/releases/tag/v1.0.3", "url": "https://api.github.com/repos/opencitations/ramose/releases/40544709", "release_id": 40544709, "date_created": "2021-03-26T14:01:00Z", "date_published": "2021-03-26T14:38:50Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/opencitations/ramose/releases/39345081", "tag": "v1.0.2", "name": "Release 1.0.2", "author": {"name": "essepuntato", "type": "User"}, "description": "The release has been created to get a DOI in Zenodo.", "tarball_url": "https://api.github.com/repos/opencitations/ramose/tarball/v1.0.2", "zipball_url": "https://api.github.com/repos/opencitations/ramose/zipball/v1.0.2", "html_url": "https://github.com/opencitations/ramose/releases/tag/v1.0.2", "url": "https://api.github.com/repos/opencitations/ramose/releases/39345081", "release_id": 39345081, "date_created": "2021-03-05T12:52:10Z", "date_published": "2021-03-05T15:13:19Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/opencitations/ramose/releases/39344665", "tag": "v1.0.1", "name": "Release 1.0.1", "author": {"name": "essepuntato", "type": "User"}, "description": "Extended the source code documentation of the tools and fixed some minor issues.", "tarball_url": "https://api.github.com/repos/opencitations/ramose/tarball/v1.0.1", "zipball_url": "https://api.github.com/repos/opencitations/ramose/zipball/v1.0.1", "html_url": "https://github.com/opencitations/ramose/releases/tag/v1.0.1", "url": "https://api.github.com/repos/opencitations/ramose/releases/39344665", "release_id": 39344665, "date_created": "2021-03-05T12:52:10Z", "date_published": "2021-03-05T15:07:15Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/opencitations/ramose/releases/38413835", "tag": "v1.0.0", "name": "first release", "author": {"name": "marilenadaquino", "type": "User"}, "description": "\r\n* Added Flask server app for testing purposes\r\n* Refactored code in classes", "tarball_url": "https://api.github.com/repos/opencitations/ramose/tarball/v1.0.0", "zipball_url": "https://api.github.com/repos/opencitations/ramose/zipball/v1.0.0", "html_url": "https://github.com/opencitations/ramose/releases/tag/v1.0.0", "url": "https://api.github.com/repos/opencitations/ramose/releases/38413835", "release_id": 38413835, "date_created": "2021-02-22T09:32:18Z", "date_published": "2021-02-22T09:41:32Z"}, "confidence": 1, "technique": "GitHub_API"}], "has_build_file": [{"result": {"value": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml", "type": "Url", "format": "pyproject.toml"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}], "has_package_file": [{"result": {"value": "pyproject.toml", "type": "Url"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}], "package_id": [{"result": {"value": "ramose", "type": "String"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}], "version": [{"result": {"value": "1.0.8", "type": "Release", "tag": "1.0.8"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}], "requirements": [{"result": {"value": "python^3.7", "name": "python", "version": "^3.7", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"value": "certifi2019.11.28", "name": "certifi", "version": "2019.11.28", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"value": "chardet3.0.4", "name": "chardet", "version": "3.0.4", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"value": "Click7.0", "name": "Click", "version": "7.0", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"value": "Flask1.1.1", "name": "Flask", "version": "1.1.1", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"value": "idna2.8", "name": "idna", "version": "2.8", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"value": "isodate0.6.1", "name": "isodate", "version": "0.6.1", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"value": "itsdangerous1.1.0", "name": "itsdangerous", "version": "1.1.0", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"value": "Jinja22.11.3", "name": "Jinja2", "version": "2.11.3", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"value": "Markdown3.1.1", "name": "Markdown", "version": "3.1.1", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"value": "MarkupSafe1.1.1", "name": "MarkupSafe", "version": "1.1.1", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"value": "python-dateutil^2.8.2", "name": "python-dateutil", "version": "^2.8.2", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"value": "requests^2.22.0", "name": "requests", "version": "^2.22.0", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"value": "six1.13.0", "name": "six", "version": "1.13.0", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"value": "urllib31.26.5", "name": "urllib3", "version": "1.26.5", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"value": "Werkzeug0.16.0", "name": "Werkzeug", "version": "0.16.0", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"value": "rdflib6.1.1", "name": "rdflib", "version": "6.1.1", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}, {"result": {"value": "RAMOSE is compatible to Python 3.7 to 3.10. To install RAMOSE use: `pip install ramose` or `pip3 install ramose`. You can find the documentation [here](https://ramose.readthedocs.io/en/latest/).\n", "type": "Text_excerpt", "original_header": "Requirements", "parent_header": ["Restful API Manager Over SPARQL Endpoints (RAMOSE)", "Configuration"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/README.md"}], "authors": [{"result": {"name": "essepuntato", "email": "essepuntato@gmail.com", "type": "Agent", "value": "essepuntato"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/pyproject.toml"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/opencitations/ramose/master/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "executable_example": [{"result": {"value": "https://raw.githubusercontent.com/opencitations/ramose/master/eval/RAMOSE_logs.ipynb", "type": "Url", "format": "jupyter_notebook"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/eval/RAMOSE_logs.ipynb"}], "continuous_integration": [{"result": {"value": "https://raw.githubusercontent.com/opencitations/ramose/master/.github/workflows/python-package.yml", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "type": [{"result": {"value": "commandline-application", "type": "String"}, "confidence": 0.82, "technique": "software_type_heuristics"}], "run": [{"result": {"value": "RAMOSE can be run via CLI by specifying configuration file and URL of the desired operation (including parameters). For example, run in the root directory:\n\n```\npython -m ramose -s <conf_name>.hf -c '<api_base><api_operation_url>?<parameters>'\n```\n\nResults are streamed in the shell in the following format:\n\n```\n# Response HTTP code: <status_code>\n# Body: <response_content>\n# Content-type: <format>\n```\n\n**Output formats.** RAMOSE returns responses in two formats, namely: `text/csv` and `application/json`. Formats can be specified as values of the argument `-f` or, alternatively, as parameters of the call. For example:\n\n```\npython -m ramose -f <csv|json> -s <conf_name>.hf -c '<api_base><api_operation_url>|<api_base><api_operation_url>?<parameters>'\n\npython -m ramose -s <conf_name>.hf -c '<api_base><api_operation_url>|<api_operation_url>?format=<csv|json>'\n```\n\nIf no format is specified, a JSON response is returned.\n\n**Ouput.** To store responses in a local file, use the argument `-o` to specify the output file:\n\n```\npython -m ramose -s <conf_name>.hf -c '<api_base><api_operation_url>?<parameters>' -o '<file_name>.<format>'\n```\n\n**API Documentation.** To produce an HTML document including the automatically generated documentation of the API, use the arguments `-d` and `-o` to specify the output file:\n\n```\npython -m ramose -s <conf_name>.hf -d -o <doc_name>.html\n```\n", "type": "Text_excerpt", "original_header": "Run locally", "parent_header": ["Restful API Manager Over SPARQL Endpoints (RAMOSE)", "Run RAMOSE"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/README.md"}, {"result": {"value": "Additionally, a Flask webserver is available for testing and debugging purposes by specifying as value of the argument `-w` the desired `<host>:<port>`. For example, to run your API in localhost:\n\n```\npython -m ramose -s <conf_name>.hf -w 127.0.0.1:8080\n```\n\nThe web application includes:\n\n * a basic dashboard for tracking API calls (available at `<host>:<port>/`)\n * the documentation of the API (available at `<host>:<port>/<api_base>`)\n\nThe local API can be tested via browser or via curl:\n\n```\n curl -X GET --header \"Accept: <format>\" \"http://<host>:<port>/<api_base><operation_url>?<parameters>\"\n```\n\n**Custom CSS** Both when running via CLI and with webserver, the path to a custom .css file can be specified in the `-css` argument to style dashboard and documentation pages.\n\n```\npython -m ramose -s <conf_name>.hf -w 127.0.0.1:8080 -css <path/to/file.css>\n```\n", "type": "Text_excerpt", "original_header": "Run with webserver", "parent_header": ["Restful API Manager Over SPARQL Endpoints (RAMOSE)", "Run RAMOSE"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/README.md"}], "usage": [{"result": {"value": "Parameters can be used to filter and control the results returned by the API. They are passed as normal HTTP parameters in the URL of the call. They are:\n\n * `require=<field_name>`: all the rows that have an empty value in the `<field_name>` specified are removed from the result set - e.g. `require=given_name` removes all the rows that do not have any string specified in the `given_name` field.\n\n * `filter=<field_name>:<operator><value>`: only the rows compliant with <value> are kept in the result set. The parameter `<operation>` is not mandatory. If `<operation>` is not specified, `<value>` is interpreted as a regular expression, otherwise it is compared by means of the specified operation. Possible operators are \"=\", \"<\", and \">\". For instance, `filter=title:semantics?` returns all the rows that contain the string \"semantic\" or \"semantics\" in the field title, while `filter=date:>2016-05` returns all the rows that have a date greater than May 2016.\n\n * `sort=<order>(<field_name>)`: sort in ascending (`<order>` set to `\"asc\"`) or `descending` (`<order>` set to `\"desc\"`) order the rows in the result set according to the values in `<field_name>`. For instance, `sort=desc(date)` sorts all the rows according to the value specified in the field date in descending order.\n\n * `format=<format_type>`: the final table is returned in the format specified in `<format_type>` that can be either `\"csv\"` or `\"json\"` - e.g. `format=csv` returns the final table in CSV format. This parameter has higher priority of the type specified through the \"Accept\" header of the request. Thus, if the header of a request to the API specifies `Accept: text/csv` and the URL of such request includes `format=json`, the final table is returned in JSON.\n\n * `json=<operation_type>(\"<separator>\",<field>,<new_field_1>,<new_field_2>,...)`: in case a JSON format is requested in return, transform each row of the final JSON table according to the rule specified. If `<operation_type>` is set to `\"array\"`, the string value associated to the field name `<field>` is converted into an array by splitting the various textual parts by means of `<separator>`. For instance, considering the JSON table `[ { \"names\": \"Doe, John; Doe, Jane\" }, ... ]`, the execution of `array(\"; \",names)` returns `[ { \"names\": [ \"Doe, John\", \"Doe, Jane\" ], ... ]`. Instead, if `<operation_type`> is set to `\"dict\"`, the string value associated to the field name <field> is converted into a dictionary by splitting the various textual parts by means of <separator> and by associating the new fields `<new_field_1>`, `<new_field_2>`, etc., to these new parts. For instance, considering the JSON table `[ { \"name\": \"Doe, John\" }, ... ]`, the execution of `dict(\", \",name,fname,gname)` returns `[ { \"name\": { \"fname\": \"Doe\", \"gname\": \"John\" }, ... ]`.\n\nIt is possible to specify one or more filtering operation of the same kind (e.g. `require=given_name&require=family_name`). In addition, these filtering operations are applied in the order presented above - first all the `require` operation, then all the `filter` operations followed by all the `sort` operation, and finally the `format` and the `json` operation (if applicable). It is worth mentioning that each of the aforementioned rules is applied in order, and it works on the structure returned after the execution of the previous rule.\n\nExample:\n\n```\n <api_operation_url>?require=doi&filter=date:>2015&sort=desc(date).\n```\n", "type": "Text_excerpt", "original_header": "Parameters and filters", "parent_header": ["Restful API Manager Over SPARQL Endpoints (RAMOSE)", "Other functionalities and examples"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/README.md"}, {"result": {"value": "Use the following files to test the application.\n\n * `test/ramose.py`\n * `test/test.hf`\n * `test/test_addon.hf`\n\n**Q1** Retrieve bibliographic metadata related to the work identified by the doi `10.1080/14756366.2019.1680659`:\n\n```\npython -m ramose -s test.hf -c '/api/v1/metadata/10.1107/S0567740872003322'\n```\n\nReturns:\n\n```\n# Response HTTP code: 200\n# Body:\n[\n    {\n        \"author\": \"\",\n        \"year\": \"1972\",\n        \"title\": \"The crystal structure of tin(II) sulphate\",\n        \"source_title\": \"Acta crystallographica. Section B\",\n        \"volume\": \"28\",\n        \"issue\": \"3\",\n        \"page\": \"864-867\",\n        \"doi\": \"10.1107/S0567740872003322\",\n        \"reference\": \"\",\n        \"citation_count\": \"1\",\n        \"qid\": \"Q29013687\"\n    }\n]\n# Content-type: application/json\n```\n\n**Q2** Retrieve bibliographic metadata of a list of works identified by their dois -- separated by `__` as specified in the field `#dois` of `test.hf` -- , and return data in `csv` format.\n\n```\npython -m ramose -s test.hf -c '/api/v1/metadata/10.1107/S0567740872003322__10.1007/BF02020444?format=csv'\n```\n\nReturns:\n\n```\n# Response HTTP code: 200\n# Body:\nauthor,year,title,source_title,volume,issue,page,doi,reference,citation_count,qid\n,1972,The crystal structure of tin(II) sulphate,Acta crystallographica. Section B,28,3,864-867,10.1107/S0567740872003322,,1,Q29013687\n\"Erd\u0151s, Paul; Hajnal, Andr\u00e1s\",1966,On chromatic number of graphs and set-systems,Acta Mathematica Hungarica,17,1-2,61-99,10.1007/BF02020444,10.4153/CJM-1959-003-9,1,Q57259020\n# Content-type: text/csv\n```\n\n**Q3** Perform **Q2** and sort results by year in ascending order:\n\n```\npython -m ramose -s test.hf -c '/api/v1/metadata/10.1107/S0567740872003322__10.1007/BF02020444?format=csv&sort=asc(year)'\n```\n\n**Q4** Perform **Q3** but return in JSON format, and split authors' names by the separator `; `\n\n```\npython -m ramose -s test.hf -c '/api/v1/metadata/10.1107/S0567740872003322__10.1007/BF02020444?format=json&sort=asc(year)&json=array(\"; \", author)'\n```\n\nReturns\n\n```\n# Response HTTP code: 200\n# Body:\n[\n    {\n        \"author\": [\n            \"Erd\u0151s, Paul\",\n            \"Hajnal, Andr\u00e1s\"\n        ],\n        \"year\": \"1966\",\n        \"title\": \"On chromatic number of graphs and set-systems\",\n        \"source_title\": \"Acta Mathematica Hungarica\",\n        \"volume\": \"17\",\n        \"issue\": \"1-2\",\n        \"page\": \"61-99\",\n        \"doi\": \"10.1007/BF02020444\",\n        \"reference\": \"10.4153/CJM-1959-003-9\",\n        \"citation_count\": \"1\",\n        \"qid\": \"Q57259020\"\n    },\n    {\n        \"author\": [],\n        \"year\": \"1972\",\n        \"title\": \"The crystal structure of tin(II) sulphate\",\n        \"source_title\": \"Acta crystallographica. Section B\",\n        \"volume\": \"28\",\n        \"issue\": \"3\",\n        \"page\": \"864-867\",\n        \"doi\": \"10.1107/S0567740872003322\",\n        \"reference\": \"\",\n        \"citation_count\": \"1\",\n        \"qid\": \"Q29013687\"\n    }\n]\n# Content-type: application/json\n```\n", "type": "Text_excerpt", "original_header": "Query wikidata endpoint from CLI", "parent_header": ["Restful API Manager Over SPARQL Endpoints (RAMOSE)", "Other functionalities and examples", "Examples"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/README.md"}, {"result": {"value": "Perform **Q2** from the local webserver\n\n```\npython -m ramose -s <conf_name>.hf -w 127.0.0.1:8080\ncurl -X GET --header \"Accept: text/csv\" \"http://localhost:8080/api/v1/metadata/10.1107/S0567740872003322__10.1007/BF02020444?format=csv\"\n```\n\nThe same query can be directly performed on the browser at `http://localhost:8080/api/v1/metadata/10.1107/S0567740872003322__10.1007/BF02020444?format=csv`\n", "type": "Text_excerpt", "original_header": "Query wikidata endpoint from webserver", "parent_header": ["Restful API Manager Over SPARQL Endpoints (RAMOSE)", "Other functionalities and examples", "Examples"]}, "confidence": 1, "technique": "header_analysis", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/README.md"}], "application_domain": [{"result": {"type": "String", "value": "Semantic web"}, "confidence": 0.9899488701060507, "technique": "supervised_classification"}], "full_title": [{"result": {"type": "String", "value": "Restful API Manager Over SPARQL Endpoints (RAMOSE)"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/README.md"}], "documentation": [{"result": {"type": "Url", "value": "https://ramose.readthedocs.io/", "format": "readthedocs"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/README.md"}], "images": [{"result": {"type": "Url", "value": "https://raw.githubusercontent.com/opencitations/ramose/master/./test/coverage/coverage.svg"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/opencitations/ramose/master/README.md"}]}