{"somef_provenance": {"somef_version": "0.9.9", "somef_schema_version": "1.0.0", "date": "2025-05-12 00:20:27"}, "code_repository": [{"result": {"value": "https://github.com/OAI/OpenAPI-Specification", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "https://github.com/OAI/OpenAPI-Specification.git", "type": "Url"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}], "owner": [{"result": {"value": "OAI", "type": "Organization"}, "confidence": 1, "technique": "GitHub_API"}], "date_created": [{"result": {"value": "2014-03-03T16:53:36Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "date_updated": [{"result": {"value": "2025-05-11T18:52:33Z", "type": "Date"}, "confidence": 1, "technique": "GitHub_API"}], "license": [{"result": {"value": "https://api.github.com/licenses/apache-2.0", "type": "License", "name": "Apache License 2.0", "url": "https://api.github.com/licenses/apache-2.0", "spdx_id": "Apache-2.0"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Apache-2.0", "type": "License"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}, {"result": {"value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright The Linux Foundation\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n", "type": "File_dump", "name": "Apache License 2.0", "spdx_id": "Apache-2.0"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/LICENSE"}], "description": [{"result": {"value": "The OpenAPI Specification Repository", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "OpenAPI Specification Automation & Infrastructure", "type": "String"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}, {"result": {"type": "Text_excerpt", "value": "The OpenAPI Specification (OAS) defines a standard, programming language-agnostic interface description for HTTP APIs. This allows both humans and computers to discover and understand the capabilities of a service without requiring access to source code, additional documentation, or inspection of network traffic. When properly defined via OpenAPI, a consumer can understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interface descriptions have done for lower-level programming, the OpenAPI Specification removes guesswork in calling a service. \nUse cases for machine-readable API definition documents include, but are not limited to: interactive documentation; code generation for documentation, clients, and servers; and automation of test cases. OpenAPI documents describe API services and are represented in YAML or JSON formats. These documents may be produced and served statically or generated dynamically from an application. \nThe OpenAPI Specification does not require rewriting existing APIs. It does not require binding any software to a service \u2013 the described service may not even be owned by the creator of its description. It does, however, require that the service's capabilities be described in the structure of the OpenAPI Specification. Not all services can be described by OpenAPI \u2013 this specification is not intended to cover every possible style of HTTP APIs, but does include support for [REST APIs](https://en.wikipedia.org/wiki/Representational_state_transfer). The OpenAPI Specification does not mandate a specific development process such as design-first or code-first. It does facilitate either technique by establishing clear interactions with an HTTP API. \nThis GitHub project is the starting point for OpenAPI. Here you will find the information you need about the OpenAPI Specification, simple examples of what it looks like, and some general information regarding the project.\n \n", "original_header": "The OpenAPI Specification"}, "confidence": 0.9118740929533398, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "This repository contains [the Markdown sources](versions) for [all published OpenAPI Specification versions](https://spec.openapis.org/). For release notes and release candidate versions, refer to the [releases page](releases).\n \n", "original_header": "Versions"}, "confidence": 0.8362319060870205, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/README.md"}, {"result": {"type": "Text_excerpt", "value": "The current process for developing the OpenAPI Specification is described in\nthe [Contributing Guidelines](CONTRIBUTING.md). \nDeveloping the next version of the OpenAPI Specification is guided by the [Technical Steering Committee (TSC)](https://www.openapis.org/participate/how-to-contribute/governance#TDC). This group of committers bring their API expertise, incorporate feedback from the community, and expand the group of committers as appropriate. All development activity on the future specification will be performed as features and merged into this branch. Upon release of the future specification, this branch will be merged to `main`. \nThe TSC holds weekly web conferences to review open pull requests and discuss open issues related to the evolving OpenAPI Specification. Participation in weekly calls and scheduled working sessions is open to the community. You can view the entire OpenAPI [technical meeting calendar](https://calendar.google.com/calendar/u/0/embed?src=c_fue82vsncog6ahhjvuokjo8qsk@group.calendar.google.com) online. \n* Review the specification [markdown sources](versions) and [authoritative _source-of-truth_ HTML renderings](https://spec.openapis.org/), including full credits and citations.\n* Review the [contributing](CONTRIBUTING.md) process so you understand how the spec is evolving.\n* Check the [discussions](https://github.com/OAI/OpenAPI-Specification/discussions), [issues](https://github.com/OAI/OpenAPI-Specification/issues) and [pull requests](https://github.com/OAI/OpenAPI-Specification/pulls) to see if someone has already documented your idea or feedback on the specification. You can follow an existing conversation by subscribing to the existing issue or PR.\n* Subscribe to an open issue a day (or a week) in your inbox via [CodeTriage.com](https://www.codetriage.com/oai/openapi-specification).\n* Create a discussion to describe a new concern, ideally with clear explanations of related use cases. \n", "original_header": "Participation"}, "confidence": 0.8897535476834924, "technique": "supervised_classification", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/README.md"}], "name": [{"result": {"value": "OpenAPI-Specification", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "full_name": [{"result": {"value": "OAI/OpenAPI-Specification", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}], "issue_tracker": [{"result": {"value": "https://api.github.com/repos/OAI/OpenAPI-Specification/issues", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "forks_url": [{"result": {"value": "https://api.github.com/repos/OAI/OpenAPI-Specification/forks", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "stargazers_count": [{"result": {"value": 29705, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "keywords": [{"result": {"value": "apis, oas, openapi, openapi-specification, rest, webapi", "type": "String"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "OpenAPI", "type": "String"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}, {"result": {"value": "OAS", "type": "String"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}, {"result": {"value": "Swagger", "type": "String"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}, {"result": {"value": "schema", "type": "String"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}, {"result": {"value": "API", "type": "String"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}], "forks_count": [{"result": {"value": 9126, "type": "Number"}, "confidence": 1, "technique": "GitHub_API"}], "download_url": [{"result": {"value": "https://github.com/OAI/OpenAPI-Specification/releases", "type": "Url"}, "confidence": 1, "technique": "GitHub_API"}], "programming_languages": [{"result": {"value": "Markdown", "name": "Markdown", "type": "Programming_language", "size": 1263843}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "JavaScript", "name": "JavaScript", "type": "Programming_language", "size": 28950}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "HTML", "name": "HTML", "type": "Programming_language", "size": 27247}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "Shell", "name": "Shell", "type": "Programming_language", "size": 8676}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "CSS", "name": "CSS", "type": "Programming_language", "size": 7188}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"value": "PowerShell", "name": "PowerShell", "type": "Programming_language", "size": 3220}, "confidence": 1, "technique": "GitHub_API"}], "releases": [{"result": {"type": "Release", "value": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/181782022", "tag": "3.1.1", "name": "OAS 3.1.1 Released!", "author": {"name": "lornajane", "type": "User"}, "description": "# Release Notes\r\n\r\nWhile the 3.1.1 release makes no changes to requirements of the OpenAPI 3.1.0 specification, it does introduce a number of notable improvements, including:\r\n- Expands and clarifies a number of explanations, including several new appendices with supplementary details\r\n- Focuses on technical specifics by moving examples and additional documentation now published at [learn.openapis.org](https://learn.openapis.org)\r\n- Declares that the HTML specifications at [spec.openapis.org](https://spec.openapis.org) are now the authoritative versions (formerly it was the Markdown source on GitHub)\r\n\r\nOpenAPI Description writers should mark their OpenAPI Descriptions with the version of the OpenAPI specification they used to write their specification, updating where possible.\r\n\r\nTooling maintainers should expect minimal work to support 3.1.1; however, we recommend checking the list of changes below.\r\n\r\n## Clearer Definitions\r\n\r\nIntroduce consistent language around OpenAPI Document/Description/Definition:\r\n- OpenAPI Description means the OpenAPI description of an API, whether it is in one or many files.\r\n- A document means a single file.\r\n- An \"entry document\" is where the OpenAPI Description for an API starts; it may reference other documents.\r\n\r\nImproved language regarding schemas, explaining the difference between the OpenAPI schema, the schemas used within the OpenAPI schema, and the use of a non-authoritative JSON Schema to supplement the written spec.\r\n\r\nAdded guidance around use of schema dialects.\r\n\r\n## References\r\n\r\nAdditional guidance for resolving references and parsing documents was added, resolving component names, tags, and operationIds are clarified.\r\nThe adoption of JSON Schema in 3.1.x changed the parsing and referencing, and a new section was added to cover the changes in more depth than in 3.1.0.\r\n\r\nImproved explanation of URLs and URIs, and made clear which to use for each URL/URI field.\r\nClarified that Markdown links are resolved in relation to their rendered context.\r\n\r\n## Data Types\r\n\r\nExtensive clarifications on data types and encoding.\r\n\r\nAdded a section on handling binary data.\r\n\r\n## Security\r\n\r\nAdded a note that a `security` array that is empty or missing does not indicate that no security arrangements exist for this API.\r\n\r\nUpdated references to other standards where newer versions are available, and added more explanation for OpenIDConnect.\r\n\r\nAdded a \"Security Concerns\" section containing advice for implementers and users of OpenAPI.\r\n\r\n## Request Data\r\n\r\nExtensive refactoring of the parameters section\r\nExamples were updated, improved, and explanations added.\r\n\r\nHeaders have their own section with examples and specific information.\r\n\r\nImproves and expands on OpenAPI `example` and `examples` and adds a \"Working with Examples\" section with a clearer description and examples.\r\n\r\nClarifies and expands on file uploads, form-urlencoded request bodies, and multipart content, and moves them to a refactored `Encoding Object` section to provide better coverage of edge cases and more examples.", "tarball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/tarball/3.1.1", "zipball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/zipball/3.1.1", "html_url": "https://github.com/OAI/OpenAPI-Specification/releases/tag/3.1.1", "url": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/181782022", "release_id": 181782022, "date_created": "2024-10-24T16:30:50Z", "date_published": "2024-10-24T17:37:48Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/181781839", "tag": "3.0.4", "name": "OAS 3.0.4 Released!", "author": {"name": "lornajane", "type": "User"}, "description": "# Release Notes\r\n\r\nWhile the 3.0.4 release makes no changes to requirements of the OpenAPI 3.0.3 specification, it does introduce a number of notable improvements, including:\r\n- Expands and clarifies a number of explanations, including several new appendices with supplementary details\r\n- Focuses on technical specifics by moving examples and additional documentation now published at [learn.openapis.org](https://learn.openapis.org)\r\n- Declares that the HTML specifications at [spec.openapis.org](https://spec.openapis.org) are now the authoritative versions (formerly it was the Markdown source on GitHub)\r\n\r\nOpenAPI Description writers should mark their OpenAPI Descriptions with the version of the OpenAPI specification they used to write their specification, updating where possible.\r\n\r\nTooling maintainers should expect minimal work to support 3.0.4; however, we recommend checking the list of changes below.\r\n\r\n## Clearer Definitions\r\n\r\nIntroduce consistent language around OpenAPI Document/Description/Definition:\r\n- OpenAPI Description means the OpenAPI description of an API, whether it is in one or many files.\r\n- A document means a single file.\r\n- An \"entry document\" is where the OpenAPI Description for an API starts; it may reference other documents.\r\n\r\nImproved language regarding schemas, explaining the difference between the OpenAPI schema, the schemas used within the OpenAPI schema, and the use of a non-authoritative JSON Schema to supplement the written spec.\r\n\r\n## References\r\n\r\nAdditional guidance for resolving references and parsing documents was added, resolving component names, tags, and operationIds are clarified.\r\nClarified that Markdown links are resolved in relation to their rendered context.\r\n\r\n## Data Types\r\n\r\nExtensive clarifications on data types and encoding.\r\n\r\nAdded a section on handling binary data.\r\n\r\n## Security\r\n\r\nAdded a note that a `security` array that is empty or missing does not indicate that no security arrangements exist for this API.\r\n\r\nUpdated references to other standards where newer versions are available, and added more explanation for OpenIDConnect.\r\n\r\nAdded a \"Security Concerns\" section containing advice for implementers and users of OpenAPI.\r\n\r\n## Request Data\r\n\r\nExtensive refactoring of the parameters section\r\nExamples were updated, improved, and explanations added.\r\n\r\nHeaders have their own section with examples and specific information.\r\n\r\nImproves and expands on OpenAPI `example` and `examples` and adds a \"Working with Examples\" section with a clearer description and examples.\r\n\r\nClarifies and expands on file uploads, form-urlencoded request bodies, and multipart content, and moves them to a refactored `Encoding Object` section to provide better coverage of edge cases and more examples.", "tarball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/tarball/3.0.4", "zipball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/zipball/3.0.4", "html_url": "https://github.com/OAI/OpenAPI-Specification/releases/tag/3.0.4", "url": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/181781839", "release_id": 181781839, "date_created": "2024-10-24T16:19:23Z", "date_published": "2024-10-24T17:36:34Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/38126497", "tag": "3.1.0", "name": "OAS 3.1.0 Released!", "author": {"name": "webron", "type": "User"}, "description": "The OAI is pleased to announce the official release of the OpenAPI Specification 3.1.0!\r\n\r\nChangelog\r\n---------\r\n\r\nSee [3.1.0-rc1](https://github.com/OAI/OpenAPI-Specification/releases/tag/3.1.0-rc1) for previous changes in 3.1.0, including the explanation of why there are breaking changes.\r\n\r\n### Additions\r\n\r\n- Added the `jsonSchemaDialect` top-level field to allow the definition of a default $schema value for Schema Objects.\r\n\r\n### Updates\r\n\r\n- Updated some links to more accurate locations.\r\n- Updates JSON Schema support to the latest [2020-12 draft](https://tools.ietf.org/html/draft-bhutton-json-schema-00).\r\n- Revamped relative reference resolution under both URIs and URLs.\r\n- Reworked file upload description to take into account new JSON Schema capabilities. This contains breaking changes.\r\n- Both `x-oai-` and `x-oas-` prefixes for Specification Extensions are now reserved to be defined by the OpenAPI Initiative.\r\n\r\n\r\n### Clarifications\r\n\r\n- Path parameter values cannot contain the unescaped characters `/`, `?` or `#`.\r\n- Further explanation of where Reference Object and JSON Schema's reference should be used.\r\n- Unified wording when values are URLs/URIs.\r\n- Reworded Path Item's `$ref` to take into account reference and component changes.\r\n- Fixed some examples.\r\n- Minor text changes to improve consistency and readability.\r\n- The description of the Reference Object has been updated to further clarify its behavior.\r\n- Further updated Schema Object's description to take into account the latest draft, and the default use of https://spec.openapis.org/oas/3.1/dialect/base as the default OAS dialect.\r\n- Reworded \"Schema Vocabularies\" to \"Schema dialects\"", "tarball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/tarball/3.1.0", "zipball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/zipball/3.1.0", "html_url": "https://github.com/OAI/OpenAPI-Specification/releases/tag/3.1.0", "url": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/38126497", "release_id": 38126497, "date_created": "2021-02-16T19:30:29Z", "date_published": "2021-02-16T19:33:45Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/32350201", "tag": "3.1.0-rc1", "name": " OAS 3.1.0-rc1 Released! ", "author": {"name": "webron", "type": "User"}, "description": "Changelog\r\n---------\r\n\r\nSee [3.1.0-rc0](https://github.com/OAI/OpenAPI-Specification/releases/tag/3.1.0-rc0) for previous changes in 3.1.0, including the explanation of why there are breaking changes.\r\n\r\n### Breaking changes\r\n- *Server Variable*'s `enum` now MUST not be empty (changed from SHOULD).\r\n- *Server Variable*'s `default` now MUST exist in the `enum` values, if such values are defined (changed from SHOULD).\r\n- `responses` are no longer required to be defined under the *Operation Object*.\r\n\r\n### Clarifications\r\n\r\n- It is now clarified when path template expression may not have a corresponding path parameter.\r\n- Data types (and just primitive data types) now correspond to JSON Schema.\r\n- Various cosmetic fixes.\r\n- A new section was added to address how to handle the `$schema` keyword (implicitly and explicitly).\r\n", "tarball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/tarball/3.1.0-rc1", "zipball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/zipball/3.1.0-rc1", "html_url": "https://github.com/OAI/OpenAPI-Specification/releases/tag/3.1.0-rc1", "url": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/32350201", "release_id": 32350201, "date_created": "2020-10-09T01:30:29Z", "date_published": "2020-10-09T01:31:59Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/27706763", "tag": "3.1.0-rc0", "name": "OAS 3.1.0-rc0 Released!", "author": {"name": "webron", "type": "User"}, "description": "Changelog\r\n---------\r\n\r\nAs part of this release, we have decided to not follow SemVer anymore, and as such introduce breaking changes. These changes are documented as part of the release notes.\r\n\r\n### Additions\r\n- Introduced a new top-level field - `webhooks`. This allows describing out-of-band webhooks that are available as part of the API.\r\n- The *Info Object* has a new `summary` field.\r\n- The *License Object* now has a new `identifier` field for SPDX licenses.\r\n- *Components Object* now has a new entry `pathItems`, to allow for reusable `Path Item Object`s to be defined within a valid OpenAPI document.\r\n\r\n\r\n### Extended Functionality\r\n- Updated primitive types to be based on [JSON Schema Specification Draft 2019-09](http://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2). This now includes type `null`.\r\n- Lifted the restriction of allowing *Request Body* only in HTTP methods where the HTTP 1.1 specification [RFC7231](https://tools.ietf.org/html/rfc7231#section-4.3.1) has explicitly defined semantics for. While allowed in other methods, it is not recommended.\r\n- Added support to `object` `type` for `spaceDelimited` and `pipeDelimited` `style` values.\r\n- The *Encoding Object* now supports `style`, `explode` and `allowReserved` for `multipart/form-data` media type as well.\r\n- To enable better `webhooks` support, expressions in the `Callback Object` can now also reference `Path Item Object`s.\r\n- When using the *Reference Object*, `summary` and `description` fields can now be overridden.\r\n- The *Schema Object* is now fully compliant with JSON Schema draft 2019-09 (see [JSON Schema Core](https://json-schema.org/draft/2019-09/json-schema-core.html) and [JSON Schema Validation](https://json-schema.org/draft/2019-09/json-schema-validation.html)). See also, `Breaking Changes`\r\n- The *Discriminator Object* can now be extended with Specification Extensions.\r\n- Added support for mutual TLS (`mutualTLS`) as a security scheme.\r\n- Used security requirements can now define an array of roles that are required for execution (and not only scopes for OAuth 2.0 security schemes).\r\n\r\n\r\n### Changes\r\n- An OpenAPI Document now requires at least one of `paths`, `components` or `webhooks` to exist at the top level. While previous versions required `paths`, now a valid OpenAPI Document can describe only webhooks, or even only reusable components. Thus, an OpenAPI Document no longer necessarily describes an API.\r\n- Anywhere in the 3.0.0 Specification that had a type of [Schema Object](#schemaObject) \\| [Reference Object](#referenceObject) has been replaced to be [Schema Object](#schemaObject) only. With the move to full JSON Schema support, `$ref` is inherently part of the `Schema Object` and has its own defined behavior.\r\n- Extensions prefixed with `x-oas-` are now reserved for the OpenAPI Initiative.\r\n- `format` is now not validated by default.\r\n\r\n### Breaking changes\r\n- The specification versioning no longer follows SemVer.\r\n- The `nullable` keyword has been removed from the `Schema Object` (`null` can be used as a type value).\r\n- `exclusiveMaximum` and `exclusiveMinimum` cannot accept `boolean` values (following JSON Schema).\r\n- Due to the compliance with JSON Schema, there is no longer interaction between `required` and `readOnly`/`writeOnly` in relation to requests and responses.\r\n- `format` (whether `byte`, `binary`, or `base64`) is no longer used to describe file payloads. As part of JSON Schema compliance, now `contentEncoding` and `contentMediaType` can be used for such specification.\r\n\r\n### Clarifications\r\n\r\n- Reworded the definition of *OpenAPI Document* to reflect that a document no longer must describe paths, but can describe either paths, webhooks, components or any combination of them.\r\n- Dropped the term RESTful APIs in favor of HTTP APIs\r\n- Resolution of relative references has been redefined and clarified. Note there's a difference in resolution between Schema Object References and all others.\r\n- Modification of examples to improve them and provide context for new fields/objects.", "tarball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/tarball/3.1.0-rc0", "zipball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/zipball/3.1.0-rc0", "html_url": "https://github.com/OAI/OpenAPI-Specification/releases/tag/3.1.0-rc0", "url": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/27706763", "release_id": 27706763, "date_created": "2020-06-18T23:54:07Z", "date_published": "2020-06-18T23:58:02Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/23779855", "tag": "3.0.3", "name": "OAS 3.0.3 Released!", "author": {"name": "webron", "type": "User"}, "description": "# OAS 3.0.3 Change Log\r\n\r\nThe OAI is pleased to announce the official release of the OpenAPI Specification 3.0.3!\r\n\r\nAs a patch release, the following changes were made to improve the specification in terms of readability and accuracy. None of these modifications change the behavior of the spec.\r\n\r\n- Clarified how Path Templating works.\r\n- Clarified the meaning of Semantic Versioning as it applies to the OpenAPI Specification (note, this is the `openapi` field, not the `version` field).\r\n- Changed some hyperlinks from `http` to `https`.\r\n- Clarified add the notion of optional security on operations.\r\n- Added an explanation that the `Server Variable Object`'s `enum` should not be empty. This is not a breaking change but should be considered as guidance for a more explicit restriction in the next major version.\r\n- Clarified paths under the `Paths Object` should start with a forward slash.\r\n- Clarified `Path Item Object`'s `$ref` behavior with sibling fields.\r\n- Fixed a few examples.\r\n- Clarified the map structure of `callbacks` under the `Operation Object`.\r\n- Clarified how path parameters are being matched.\r\n- Clarified `example`/`examples` value(s) in the `Parameter Object`.\r\n- Fixed example for `pipeDelimited` `object` value.\r\n- Fixed `Callback Object` description.\r\n- Clarified `Link Object`'s `operationDef`'s description.\r\n- Improved ABNF for `Runtime Expressions`.\r\n- Clarified valid regex for `pattern` under `Schema Object`.\r\n- Clarified the behavior of `nullable` under `Schema Object`.\r\n- Fixed names of OAuth2 flows in the description of `Security Scheme Object`.\r\n- Improved description of `Security Filtering` section.", "tarball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/tarball/3.0.3", "zipball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/zipball/3.0.3", "html_url": "https://github.com/OAI/OpenAPI-Specification/releases/tag/3.0.3", "url": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/23779855", "release_id": 23779855, "date_created": "2020-02-21T01:36:22Z", "date_published": "2020-02-21T01:37:40Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/13307763", "tag": "3.0.2", "name": "OAS 3.0.2 Released!", "author": {"name": "webron", "type": "User"}, "description": "# OAS 3.0.2 Change Log\r\n\r\nThe OAI is pleased to announce the official release of the OpenAPI Specification 3.0.2!\r\n\r\nAs a patch release, the following changes were made to improve the specification in terms of readability and accuracy. None of these modifications change the behavior of the spec.\r\n\r\n- Added clarification to case sensitivity of keys in maps.\r\n- Reworked the Data Type table, removing the `Common Name` to reduce potential confusion.\r\n- Clarified the description of the `Server Variable Object`'s `default` field.\r\n- Fixed various examples.\r\n- Clarified `operationId` is case sensitive.\r\n- Clarified the default value of the `Parameter Object`'s `deprecated` field is `false`.\r\n- Added recommendation to not use the `Parameter Object`'s `allowEmptyValue` field as it will be removed in a future version.\r\n- Fixed the description of the `Media Type Object`'s `schema` field.\r\n- Clarified the description of the `Responses Object`'s response codes field description.\r\n- Clarified that the `Schema Object`'s `additionalProperties` field has a default value of `true`.\r\n- Fixed a small wording issue in the `Discriminator Object` description.\r\n- Fixed the `Security Scheme Object` description to include reference to the use of API Keys in cookies.\r\n- Fixed the description of the `Security Requirement Object`.", "tarball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/tarball/3.0.2", "zipball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/zipball/3.0.2", "html_url": "https://github.com/OAI/OpenAPI-Specification/releases/tag/3.0.2", "url": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/13307763", "release_id": 13307763, "date_created": "2018-10-08T16:27:35Z", "date_published": "2018-10-08T16:31:35Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/8807309", "tag": "3.0.1", "name": "OAS 3.0.1 Released!", "author": {"name": "webron", "type": "User"}, "description": "# OAS 3.0.1 Change Log\r\n\r\nThe OAI is pleased to announce the official release of the OpenAPI Specification 3.0.1!\r\n\r\nThis our first patch release since 3.0.0, containing the following updates:\r\n\r\n## Specification Changes\r\n- Updated document links to HTTPS where applicable.\r\n- `example` and `examples` fields descriptions were updated to reference them as 'fields' and not 'objects'.\r\n- Fixed various examples (indentation, field names, comments).\r\n- Removed the Examples Object as it was left over during editing of v3.0.0. It was not used or referenced to by any other object in the specification.\r\n- Various typo fixes.\r\n\r\n## Additional Changes\r\n\r\n- Clarified the roles and processes in the Technical Steering Committee (TSC, formerly the TDC).\r\n- Improvements to the development guidelines.\r\n", "tarball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/tarball/3.0.1", "zipball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/zipball/3.0.1", "html_url": "https://github.com/OAI/OpenAPI-Specification/releases/tag/3.0.1", "url": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/8807309", "release_id": 8807309, "date_created": "2017-12-07T06:00:21Z", "date_published": "2017-12-07T06:06:51Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/7170134", "tag": "3.0.0", "name": "OAS 3.0.0 Released!", "author": {"name": "webron", "type": "User"}, "description": "# OAS 3.0.0 Change Log\r\n\r\nThe OAI is pleased to announce the official release of the OpenAPI Specification 3.0.0!\r\n\r\nThe list below reflect the changes since the last release candidate.\r\n\r\n## Schema Changes\r\n- The `headers` map under the Encoding Object can now also reference headers.\r\n\r\n## Descriptive Changes\r\n- Reworded descriptions for clearer intent (no change of meaning).\r\n- The OpenAPI Definition File has been renamed as the OpenAPI Document.\r\n- Changes to better conform to RFC 2119.\r\n- Elaborated Request Body's and Response's content field support media type ranges.\r\n- Fixed descriptions of `operationRef` and `operationId` under the Link Object. Also clarified that a Link MUST contain one of them.\r\n- Added links to OAuth2's and OpenID Connect's specifications.\r\n\r\n## Document Changes\r\n- Some example fixes.\r\n\r\nCheck it out! https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/3.0.0.md\r\n", "tarball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/tarball/3.0.0", "zipball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/zipball/3.0.0", "html_url": "https://github.com/OAI/OpenAPI-Specification/releases/tag/3.0.0", "url": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/7170134", "release_id": 7170134, "date_created": "2017-07-26T07:31:24Z", "date_published": "2017-07-26T07:31:51Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/6744886", "tag": "3.0.0-rc2", "name": "OAS 3.0.0-rc2 Released!", "author": {"name": "webron", "type": "User"}, "description": "# OAS 3.0.0-rc2 Change Log\r\n\r\n## Schema Changes\r\n\r\n- The following objects have been removed from the specification: Server Variables, Content, Encoding, Callbacks, Headers, Links, Link Parameters, Scopes. They have all been replaced by the `Map` construct being effectively what they are. Clarifies that specification extensions are not allowed, as they did not make sense.\r\n- The Encoding Property Object has been renamed to the Encoding Object. This is a result of the above change.\r\n- The Encoding Object now specifies to which media type each property is applicable.\r\n- The Encoding Object now defines `headers` as a map of Header Objects.\r\n- The different components under the `Components Object` can now either be defined inline or referenced.\r\n- For parameters using `content`, now only one media type can be used at most.\r\n- The `headers` property under the Link Object has been removed.\r\n- Link Object has a new `requestBody` property to allow passing a request body.\r\n- The Schema Object's `discriminator` property has been completely reworked to utilize the newly supported `oneOf` and `anyOf`. A new `Discriminator Object` has been added to support these changes.\r\n- The XML Object's `namespace` now MUST be an absolute URI.\r\n- The `apiKey` security scheme can now also be in `cookie`.\r\n\r\n## Descriptive Changes\r\n\r\n- The `Rich Text Formatting` section has been reworded to ease the requirements.\r\n- Added OpenAPI Definition File definition.\r\n- Clarified that an empty or nonexisting `servers` would default to a single Server with the `url` value of `/`.\r\n- Reworded the section explaining the specification's versioning scheme.\r\n- Server Variable `enum`'s description has been fixed to state it can only be a string (the type was correct).\r\n- Added clarification + examples how path matching works for paths defined under the `Paths Object`. \r\n- Removed recommendation for a 120 character limit for the `summary` field under the Operation Object.\r\n- Further details added to the `form` and `simple` types of `style`.\r\n- Clarified that the Encoding Object applies to both `multipart` and `application/x-www-form-urlencoded` and only those.\r\n- Clarified the possible response code wildcards are only `1XX`, `2XX`, `3XX`, `4XX` or `5XX`.\r\n- Variable Expressions have been renamed to Runtime Expressions. They have been unified between Links and Callbacks, and have a dedicated section. Various examples have been moved and removed as a result.\r\n- Runtime expressions now use curly braces when found inside strings.\r\n- Link Object's `parameters` now defines how to deal with cases of parameter name ambiguity. \r\n\r\n## Document Changes\r\n\r\n- ToC has been updated to reflect changes.\r\n- Fixed various anchors in the document.\r\n- Various examples have been fixed.\r\n- Various editorial changes were made to make the document more readable.\r\n\r\nCheck it out! https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md", "tarball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/tarball/3.0.0-rc2", "zipball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/zipball/3.0.0-rc2", "html_url": "https://github.com/OAI/OpenAPI-Specification/releases/tag/3.0.0-rc2", "url": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/6744886", "release_id": 6744886, "date_created": "2017-06-17T00:10:31Z", "date_published": "2017-06-17T00:19:50Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/6217165", "tag": "3.0.0-rc1", "name": "OAS 3.0.0-rc1 Released!", "author": {"name": "webron", "type": "User"}, "description": "# OAS 3.0.0-rc1 Change Log\r\n\r\n## Schema Changes\r\n\r\n- `url` is now **required** under the Server Object.\r\n- Server Variable Object's `enum` and `default` values are now `string` only (were any `primitive`).\r\n- `servers` under the Path Item Object and Operation Object has been fixed to be an array of Server Objects and not a single one.\r\n- The `example` and `examples` fields have been reworked, alongside the Example Object. There is no longer `examples` field under the Schema Object. Where `examples` exist, they are now a map of named examples with additional metadata for each example. The Example Object now has defined fields and is not free-form.\r\n- `content` is now **required** under the Request Body Object.\r\n- `href` under the Link Object has been renamed to `operationRef`, its description is clarified as well.\r\n- The `deprecated` field under the Schema Object now defaults to `false`.\r\n- The `flow` field under the Security Scheme Object has been renamed to `flows`.\r\n- Request Body's `required` now defaults to `false`.\r\n- Added `allowReserved` to the Encoding Property Object.\r\n\r\n\r\n## Descriptive Changes\r\n\r\n- `termsOfService` now MUST be in the form of a URL.\r\n- all `description` fields now support CommonMark.\r\n- Clarified that specific response codes (`200` for example) take precedence over response ranges (`2XX` for example).\r\n- Clarified that for Parameter Object, either `schema` or `content` are required.\r\n- `pattern` under the Schema Object now specifies the regex flavor.\r\n- Added header restrictions. \"Accept\", \"Content-Type\", \"Authorization\" header paramters and \"Content-Type\" response headers will now be ignored.\r\n- Referenced a specific version of supported CommonMark.\r\n- Added clarifications to `null` not being a type (as opposed to a value).\r\n\r\n\r\n## Document Changes\r\n\r\n- ToC has been updated to reflect changes.\r\n- Fixed various anchors in the document.\r\n- Various examples have been fixed.\r\n\r\nCheck it out! https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md", "tarball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/tarball/3.0.0-rc1", "zipball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/zipball/3.0.0-rc1", "html_url": "https://github.com/OAI/OpenAPI-Specification/releases/tag/3.0.0-rc1", "url": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/6217165", "release_id": 6217165, "date_created": "2017-04-28T02:10:18Z", "date_published": "2017-04-28T02:12:42Z"}, "confidence": 1, "technique": "GitHub_API"}, {"result": {"type": "Release", "value": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/5600557", "tag": "3.0.0-rc0", "name": "OAS 3.0.0-rc0 Released!", "author": {"name": "webron", "type": "User"}, "description": "We're happy to announce the release of the first Implementer's Draft of OAS 3.0.0, known as 3.0.0-rc0.\n\nA lot of changes in this release, as a first one goes, so expect the change log to be updated. An initial list of changes, in no particular order:\n- Changed the versioning scheme of the spec.\n- Reusable definitions in the spec has been expanded and reorganized under the Components Object.\n- Added support for operation callbacks.\n- Added support for a new static linking between responses and operations.\n- Reworked parameters - removed formData parameters, added cookie parameters, changed body parameters to Request Body Objects as a separate entity.\n- Parameters now support complex types.\n- Responses support multiple media type specifications.\n- Reworked file support. Dropped `file` as a type, but provided better handling for file uploads and downloads.\n- Reworked security definitions to allow for support for more schemes.\n- Improved support for examples throughout the spec.\n- Added support for defining multiple servers hosting the API, including URL variables.\n\nCheck it out! https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md\n\nOur [blog post](https://www.openapis.org/blog/2017/03/01/openapi-spec-3-implementers-draft-released) contains more details of the process and next steps.\n", "tarball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/tarball/3.0.0-rc0", "zipball_url": "https://api.github.com/repos/OAI/OpenAPI-Specification/zipball/3.0.0-rc0", "html_url": "https://github.com/OAI/OpenAPI-Specification/releases/tag/3.0.0-rc0", "url": "https://api.github.com/repos/OAI/OpenAPI-Specification/releases/5600557", "release_id": 5600557, "date_created": "2017-03-01T00:43:45Z", "date_published": "2017-03-01T01:04:19Z"}, "confidence": 1, "technique": "GitHub_API"}], "contributing_guidelines": [{"result": {"value": "# Contribute to the OpenAPI Specification\n\n## Key information\n\nThis project is covered by our [Code of Conduct](https://github.com/OAI/OpenAPI-Specification?tab=coc-ov-file#readme).\nAll participants are expected to read and follow this code.\n\nNo changes, however trivial, are ever made to the contents of published specifications (the files in the `versions/` folder).\nExceptions may be made when links to external URLs have been changed by a 3rd party, in order to keep our documents accurate.\n\nPublished versions of the specification are in the `versions/` folder.\nThe under-development versions of the specification are in the file `src/oas.md` on the appropriately-versioned branch.\nFor example, work on the next release for 3.2 is on `v3.2-dev` in the file `src/oas.md`.\n\nThe [spec site](https://spec.openapis.org) is the source of truth for the OpenAPI specification as it contains all the citations and author credits (the markdown in this repository was previously the authoritative version until 2024).\n\nThe OpenAPI project is almost entirely staffed by volunteers.\nPlease be patient with the people in this project, who all have other jobs and are active here because we believe this project has a positive impact in the world.\n\n### Active branches\n\nThe current active specification releases are:\n\n| Version | Branch | Notes |\n| ------- | ------ | ----- |\n| 3.1.2 | `v3.1-dev` | active patch release line |\n| 3.2.0 | `v3.2-dev` | minor release in development |\n| 4.0.0 | [OAI/sig-moonwalk](https://github.com/OAI/sig-moonwalk) | [discussions only](https://github.com/OAI/sig-moonwalk/discussions) |\n\n\n## How to contribute\n\nWe welcome new contributors to the project whether you have changes to suggest, problems to report, or some feedback for us.\nPlease jump to the most relevant section from the list below:\n\n- Ask a question or offer feedback: use a [discussion](#discussions)\n- Suggest a change or report a problem: open an [issue](#issues)\n- Contribute a change to the repository: open a [pull request](#pull-requests)\n- Or just [get in touch](#get-in-touch)\n\n## Discussions\n\nWe use [discussions](https://github.com/OAI/OpenAPI-Specification/discussions?discussions_q=is%3Aopen) for anything that doesn't (yet) have a specific action associated with it.\nMost ideas start as discussions.\n\nPlease do come and start a discussion to:\n\n- ask questions\n- make suggestions\n- give feedback\n\nAnyone can start a discussion and you're very welcome to do so! Write a message and pick a relevant discussion category.\n\n### Discussion management\n\nParticipation in discussions and especially answering of questions is encouraged (and appreciated) by everyone.\n\nDiscussions are closed when:\n\n- the question has been answered.\n- no further action or conversation would be useful.\n- there has been no engagement for a while, or a previously popular thread has been inactive for an extended period.\n- activity is now taking place elsewhere, such as in an issue.\n- the discussion is out of scope for the project.\n\n## Issues\n\nIssues are for planned tasks, problems to solve, or requests for (specific) changes.\nMost issues should have a clear outcome; something will be fixed, improved or otherwise measurably different when the issue is complete.\n\nWe use [discussions](#discussions) for ideas and early-stage suggestions.\n\n> [!NOTE]\n> For larger or more extensive changes, we have a formal [proposal process](#propose-a-specification-change) to give more structure where it's needed.\n\nThe best issues give a clear and concise explanation of the problem at hand, and ideally some examples of what the problem is.\nSuggested solutions are also welcome, but it is very important that the issue outlines the problem that is being solved as well as the solution.\nSome issues may be a backlog of a task that needs to be done; other issues might be automatically created as part of the project processes.\n\n### Issue management\n\nWe have some issue automation to close inactive issues and create/pin/archive the weekly meeting issues.\nMore information is in the [Appendix: Issue automation](#appendix-issue-automation) section.\n\nEveryone is encouraged to open and comment on issues in the project.\nIf you want to tag/assign/close something and you don't have enough permissions, add a comment and someone will help.\n\nIssues are managed by the [Triage](#triage), [Maintainers](#maintainers) and [TSC](#tsc) teams.\nThey may move issues to other repositories within the project as needed.\n\nIn order to keep the issues list manageable and realistic for a relatively small group of volunteers, issues are proactively closed when it's not clear that they can be completed.\nIssues may be closed when:\n\n- they have been inactive for a long time\n- they are out of scope or no further constructive action can be taken\n- they are complete (yay!)\n- they are unclear and more details are not forthcoming\n- as a group, there is agreement that no further action will be taken\n\nWhen issues are closed, a comment is added about why.\nClosing issues is a reversible action, and it is always acceptable to comment and explain (politely) why an issue should not have been closed.\n\n### Labels\n\nWe make extensive use of labels.\nThe main categories are:\n\n- [Housekeeping](https://github.com/OAI/OpenAPI-Specification/labels/Housekeeping) for meetings, project logistics, etc.\n- [approved pr port](https://github.com/OAI/OpenAPI-Specification/labels/approved%20pr%20port) for pull requests that repeat a change from one version to another\n- most other tags are used to group similar or related issues into topic areas; this list is ever-changing\n\nLabels related to [issue automation](#appendix-issue-automation)\n\n- [Needs attention](https://github.com/OAI/OpenAPI-Specification/labels/Needs%20attention) automated tag when an issue is updated\n- [Needs author feedback](https://github.com/OAI/OpenAPI-Specification/labels/Needs%20author%20feedback) used to indicate that more information is needed from the issue creator\n- [No recent activity](https://github.com/OAI/OpenAPI-Specification/labels/No%20recent%20activity) if no information is received, the issue is marked for closure (automatic after 30 days)\n\n### Milestones\n\nWe use milestones in GitHub to plan what should be included in future releases.\nIssues and pull requests should both be added to the earliest milestone we expect they will be released in.\nAny changes that aren't ready in time for release should be moved to the next milestone or untagged.\n\nThe milestones and items assigned to them are under constant review and subject to change.\n\n### Projects\n\nThe OpenAPI Initiative uses GitHub Projects to manage work _outside_ of the specification development process.  There are currently two active projects:\n\n* [Contributor Guidance](https://github.com/orgs/OAI/projects/5/views/1)\n* [Automation & Infrastructure](https://github.com/orgs/OAI/projects/4/views/1)\n\n## Pull requests\n\n> [!NOTE]\n> Since the 3.0.4 and 3.1.1 releases (October 2024), the OAS is developed in the `src/oas.md` file.\n> Check the [Appendix: Branch Strategy](#appendix-branch-strategy) for more information about the updated branching strategy.\n\nChanges to the next version of the specification are welcome and can be proposed by anyone.\n\nFor large changes that will need discussion, please use the [Proposal process](#propose-a-specification-change).\nFor other changes, we recommend [opening an issue](#issues) first, so that you can get some feedback and any extra input you need before spending a lot of time on something.\n\nSchema changes are made on the same branch, but can be released independently.\nWhen making a specification change for a new minor or major release that has a schema impact, including the schema change in the PR is preferred.\nPatch releases cannot contain changes that _require_ a schema update.\n\n### Use a fork\n\nAll work **MUST be done on a fork** and be submitted as a pull request.\n\n### Target the earliest active `*-dev` branch\n\nBranch from and submit pull requests to the a branch from the _earliest relevant and [active](#active-branches)_ `vX.Y-dev` branch.\nFor example, if a change applies to both 3.1 and 3.2, the PR would go to the `v3.1-dev` branch, which will be merged up to `v3.2-dev` before the next 3.2 release.\nAll changes to the specification must conform to the [style guide](./style-guide.md).\n\nBoth specification and schema changes follow this approach.\n\nFor changes to repository files that affect all versions, use the `main` branch.\nThis might apply to, for example, Markdown files, automation, and scripts.\n\nFor all pull requests, if they should not be merged yet for any reason (they depend on something else, you would like feedback from a specific reviewer), mark them as draft and they will not be merged while in that state.\nDraft pull requests can still be reviewed while in draft state.\n\n### Preview specification HTML locally\n\n> [!NOTE]\n> `npm run build-src` calls bash scripts. Use [Git Bash](https://gitforwindows.org/) on Windows, or use the Windows Subsystem for Linux (WSL).\n\nThe markdown source files are converted to HTML before publishing.\nTo do this locally, please\n\n1. Install [Node.js](https://nodejs.org/)\n2. Check out this repo, go to the repo root, and switch to a development branch\n3. Execute `npm install` (once, repeat after merging upstream changes)\n4. Execute `npm run build-src` after changing `src/oas.md` (this first executes `npm run validate-markdown`, which can also be run separately)\n5. Open output file `deploy-preview/oas.html` with a browser and check your changes\n\nPlease make sure the markdown validates and builds using the above steps before creating a pull request or marking a draft pull request as ready for review.\n\n## Reviewers\n\n> [!NOTE]\n> See also the detailed team outlines in the [roles section](#roles).\n\nAll pull requests must be reviewed and approved by one member of the TSC or Maintainers teams.\nReviews from other contributors are always welcome.\n\nAdditionally, all pull requests that change the specification file `src/oas.md` must be approved by two TSC members.\n\nReviews requesting changes should have their changes addressed regardless of how many other approvers there are.\n\n## Publishing\n\n### Specification Versions\n\nThe specification versions are published to the [spec site](https://spec.openapis.org) by creating an `vX.Y.Z-rel` branch where `src/oas.md` is renamed to the appropriate `versions/X.Y.Z.md` file and then merged to `main`.\nThis renaming on the `vX.Y.Z-rel` branch preserves the commit history for the published file on `main` when using `git log --follow` (as is the case for all older published files).\n\nThe steps for creating a `vX.Y.Z-rel` branch are:\n\n1. Update `EDITORS.md` on `main`\n2. Merge `main` into `dev` and `dev` into `vX.Y-dev` via PRs\n   - sync PRs are automatically created by workflows `sync-main-to-dev` and `sync-dev-to-vX.Y-dev`\n3. Prepare spec files in `vX.Y-dev`\n   - `npm run format-markdown`\n   - `npm run build-src`\n   - open `deploy-preview/oas.html` in browser and verify correct formatting\n   - adjust and repeat until done\n   - merge changes to `src/oas.md` back into `vX.Y-dev` via PR\n4. Create `vX.Y.Z-rel` from `vX.Y-dev` and adjust it\n   - move `src/oas.md` to `versions/X.Y.Z.md`\n   - copy `EDITORS.md` to `versions/X.Y.Z-editors.md`\n   - delete `src/schemas`\n   - delete `tests/schema`\n   - bash script `scripts/adjust-release-branch.sh` performs these steps\n5. Merge `vX.Y.Z-rel` into `main` via PR\n   - this PR should only add files `versions/X.Y.Z.md` and `versions/X.Y.Z-editors.md`\n\nThe HTML renderings of the specification versions are generated from the `versions` directory on `main` by manually triggering the [`respec` workflow](https://github.com/OAI/OpenAPI-Specification/blob/main/.github/workflows/respec.yaml), which generates a pull request for publishing the HTML renderings to the [spec site](https://spec.openapis.org).\n\n### Schema Iterations\n\nThe schema iterations are published independently from the specification releases [in the schema section on the spec site](https://spec.openapis.org/#openapi-specification-schemas).\nSchemas are updated in and directly published from the `vX.Y-dev` branches.\n\nAs part of the publishing process, the YAML source files are converted to JSON, renamed to the relevant last-changed dates, and `WORK-IN-PROGRESS` placeholders are replaced with these dates as appropriate. This is usually done by the `schema-publish` workflow which detects changes on each `vX.Y-dev` branch, which generates a pull request for publishing the new schema iterations to the [spec site](https://spec.openapis.org). The workflow can also be run manually if required.\n\n## Release Process and Scope\n\nThis section relates to the 3.x versions only.\n\n### Minor Releases\n\nOur roadmap for 3.x releases is community-driven, meaning the specification is open for proposed additions by anyone (see [Propose a Specification Change](#propose-a-specification-change)), in addition to the issues already on the project backlog.\n\nChanges in minor releases (such as 3.2, 3.3) meet the following criteria:\n\n* Are **backwards-compatible** and be reasonably easy to implement in tooling that already supports the previous minor version.\n  For example, new optional fields can be added.\n* Drive quality-of-life improvements to support how OpenAPI is used by practitioners, so that OpenAPI evolves to continue to meet user needs.\n  For example, adding fields to support changes in other standards, or adopting common `x-*` extension fields into the specification.\n* Bring the future closer by making changes that are in line with future 3.x releases and the planned OpenAPI 4.x (Moonwalk) specification as the details of that become available.\n* Make the specification document clearer or easier to understand.\n\nA minor release is due when there are some meaningful features (including one or a small number of headline features).\n\n### Patch Releases\n\nPatch releases reflect a constant quest for improving the active minor versions of OpenAPI.\nSince we do not edit specification documents after publication, even the smallest change has to be in a new release.\n\nChanges in patch releases meet the following criteria:\n\n* Editorial changes such as spelling or formatting fixes, including link updates.\n* Clarifications or additions that do not change the meaning of the specification.\n\nPatch releases are created as often as there are changes to the specification worth releasing.\n\n### Release Process\n\nA release requires a vote on the specification at a particular version and the associated release notes by TSC members within the voting period.\nMajor or minor release voting periods will be announced in the Slack channel and noted on the calendar at least 6 days in advance.\nDuring this time, TSC members who have not yet voted must note their approval by leaving a comment on the GitHub pull request proposing the release; release notes should be included with the description.\nTSC members are responsible for coordinating the information about the release to the outreach team as appropriate.\n\n* Patch-level releases require majority approval by TSC members. (Max voting period 3 days)\n\n* Minor: requires approval by 66% of TSC members. (Max voting period 7 days)\n\n* Major: requires approval by 66% of TSC members. (Max voting period 14 days)\n\nDuring the voting period, further changes should not be made to the specification being considered.\n\nOnce the threshold of approvals is met, the release can be performed by any TSC member.\n\n## Propose a Specification Change\n\nAs an organisation, we're open to changes, and these can be proposed by anyone.\nThe specification is very widely adopted, and there is an appropriately high bar for wide appeal and due scrutiny as a result.\nWe do not accept changes lightly (but we will consider any that we can).\n\nSmall changes are welcome as pull requests.\n\nBigger changes require a more formal process.\n\n1. Start a [discussion](https://github.com/OAI/OpenAPI-Specification/discussions) of type \"Enhancements\".\n   The discussion entry must include some use cases, your proposed solution and the alternatives you have considered.\n   If there is engagement and support for the proposal over time, then it can be considered as a candidate to move to the next stage.\n\n2. It really helps to see the proposed change in action.\n   Start using it as a `x-*` extension if that's appropriate, or try to bring other evidence of your proposed solution being adopted.\n\n3. If you are adding support for something from another specification (such as OAuth), please point to implementations of that\n   specification so that we can understand how, and to what degree, it is being used.\n\n4. If the suggested change has good support, you will be asked to create a formal proposal.\n   Use the [template in the proposals directory](https://github.com/OAI/OpenAPI-Specification/tree/main/proposals), copy it to a new file, and complete it.\n   Once you the document is ready, open a pull request on the main branch.\n\n5. The proposal will be more closely reviewed and commented on or amended until it is either rejected or accepted.\n   At that point, the proposal is merged into the `main` branch and a pull request is opened to add the feature to the appropriate `dev` version of the specification.\n\nQuestions are welcome on the process at any time. Use the discussions feature or find us in Slack.\n\n## Roles\n\nThe OpenAPI project has some key roles that are played by multiple people.\n\n### TSC\n\nThe Technical Steering Committee are listed in the [MAINTAINERS file](./MAINTAINERS.md).\nThey are the maintainers of the OpenAPI Specification itself and every other aspect of the project operation and direction.\nTSC members can review changes to all parts of the repository and make decisions about the project.\n\n### Maintainers\n\nThe maintainers have write access to the repository and play a key role in the project.\nThey review pull requests to non-specification parts of the repository, and take on other strategic tasks around project planning and maintenance.\n\n### Triage\n\nThe triage team are active OpenAPI members who help with discussion and issue management.\nThey respond to new issues and discussions, direct people to our existing resources or raise conversations to a wider audience.\nThe triage team keeps an eye on the backlog and closes issues and discussions that are no longer active or needed.\n\n## Get in touch\n\nTo get in touch with other people on the project, ask questions, or anything else:\n\n- Find us [on the OpenAPI Slack](https://communityinviter.com/apps/open-api/openapi).\n- Start a [GitHub Discussion](https://github.com/OAI/OpenAPI-Specification/discussions/).\n- Join one of our weekly meetings by checking the [issues list for an upcoming meetings](https://github.com/OAI/OpenAPI-Specification/issues?q=is%3Aissue%20state%3Aopen%20label%3AHousekeeping).\n\n## Appendix: Branch strategy\n\nFor information on the branch and release strategy for OAS 3.0.4 and 3.1.1 and earlier, see the comments in [issue #3677](https://github.com/OAI/OpenAPI-Specification/issues/3677).\n\n### Branch roles\n\n* `main` is used to publish finished work and hold the authoritative versions of general documentation such as this document, which can be merged out to other branches as needed.  The `src` tree is _**not**_ present on `main`.\n* `dev` is the primary branch for working with the `src` tree.  Development infrastructure that is not needed on `main` is maintained here, and can be merged out to other non-`main` branches as needed.\n  Changes on `main` are automatically included in a pull request to `dev` (see the (section on [branch sync](#branch-sync-automation)).\n* `vX.Y-dev` is the minor release line development branch for X.Y, including both the initial X.Y.0 minor version and all subsequent X.Y.Z patch versions.  All PRs are made to oldest active `vX.Y-dev` branch to which the change is relevant, and then merged forward as shown in the diagram further down in this document.\n* `vX.Y.Z-rel` is the release branch for an X.Y.Z release (including when Z == 0).  It exists primarily for `git mv`-ing `src/oas.md` to the appropriate `versions/X.Y.Z.md` location before merging back to `main`, and can also be used for any emergency post-release fixes that come up, such as when a 3rd party changes URLs in a way that breaks published links.\n\n### Branching and merging (3.1.2, 3.2.0, and later)\n\nUpon release:\n\n* Pre-release steps:\n  * The most recent _published_ patch release from the previous line is merged up to `vX.Y-dev`, if relevant\n  * If doing simultaneous releases on multiple lines, do them from the oldest to newest line\n  * For example, if releasing 3.1.3 and 3.2.0:\n    * release 3.1.3 first\n    * release 3.2.0 second\n* Release branching and merging:\n  * branch `vX.Y.Z-rel` from `vX.Y-dev` (same commit that was merged to `dev` if relevant)\n  * After renaming `src/oas.md` to `versions/X.Y.Z.md` and [other adjustments](#specification-versions), merge `vX.Y.Z-rel` to `main`\n* Publishing to the [spec site](https://spec.openapis.org) is triggered by the merge to `main`\n* Post-release steps:\n  * If this was a major or minor release (Z == 0), branch `vX.Y+1-dev` from `vX.Y-dev`\n\n_Release lines are grouped by color, although the colors of `dev` and `main` are not significant as these diagrams are limited to only 8 colors._\n\n```mermaid\n---\nconfig:\n  themeVariables:\n    git0: \"#5588bb\"\n    git1: \"#cc8899\"\n    git2: \"#eedd88\"\n    git3: \"#ccbb66\"\n    git4: \"#aa9944\"\n    git5: \"#887722\"\n    git6: \"#99ccff\"\n    git7: \"#77aadd\"\n    gitBranchLabel1: \"#000000\"\n    gitBranchLabel2: \"#000000\"\n    gitBranchLabel3: \"#000000\"\n    gitBranchLabel4: \"#000000\"\n    gitBranchLabel5: \"#ffffff\"\n    gitBranchLabel6: \"#000000\"\n    gitBranchLabel7: \"#000000\"\n---\ngitGraph TB:\n  commit id:\"merge 3.1.1.md to main\" tag:\"3.1.1\"\n  branch dev order:1\n  commit id:\"rename 3.1.1.md to src/oas.md\"\n  branch v3.1-dev order:2\n  commit id:\"update version in src/oas.md to 3.1.2\"\n  checkout dev\n  branch v3.2-dev order:6\n  commit id:\"update version in src/oas.md to 3.2.0\"\n  commit id:\"some 3.2.0 work\"\n  checkout v3.1-dev\n  commit id:\"a 3.1.x fix\"\n  checkout v3.2-dev\n  merge v3.1-dev id:\"merge 3.1.2 fixes\"\n  checkout v3.1-dev\n  branch v3.1.2-rel order:3\n  commit id:\"rename src/oas.md to versions/3.1.2.md\"\n\n  checkout main\n  merge v3.1.2-rel tag:\"3.1.2\"\n  checkout dev\n  merge main id:\"auto-sync from main\"\n  checkout v3.1-dev\n  merge dev  id:\"auto-sync from dev\"\n  checkout v3.2-dev\n  merge dev  id:\"auto-sync from dev \"\n\n  commit id:\"more 3.2.0 work\"\n  checkout v3.1-dev\n  commit id:\"update version in src/oas.md to 3.1.3\"\n  commit id:\"another 3.1.x fix\"\n  checkout v3.2-dev\n  commit id:\"still more 3.2.0 work\"\n  merge v3.1-dev id:\"merge 3.1.3 fixes before releasing\"\n\n  checkout v3.1-dev\n  branch v3.1.3-rel order:4\n  commit id:\"rename src/oas.md to versions/3.1.3.md\"\n  checkout v3.2-dev\n  branch v3.2.0-rel order:7\n  commit id:\"rename src/oas.md to versions/3.2.0.md\"\n\n  checkout main\n  merge v3.1.3-rel tag:\"3.1.3\"\n  checkout dev\n  merge main id:\" auto-sync from main\"\n  checkout v3.1-dev\n  merge dev  id:\" auto-sync from dev\"\n  checkout v3.2-dev\n  merge dev  id:\" auto-sync from dev \"\n\n  checkout main\n  merge v3.2.0-rel tag:\"3.2.0\"\n  checkout dev\n  merge main id:\"  auto-sync from main\"\n  checkout v3.1-dev\n  merge dev  id:\"  auto-sync from dev\"\n  checkout v3.2-dev\n  merge dev  id:\"  auto-sync from dev \"\n\n  checkout v3.2-dev\n  branch v3.3-dev order:9\n  checkout v3.1-dev\n  commit id:\"update version in src/oas.md to 3.1.4\"\n  checkout v3.2-dev\n  commit id:\"update version in src/oas.md to 3.2.1\"\n  checkout v3.3-dev\n  commit id:\"update version in src/oas.md to 3.3.0\"\n\n  checkout v3.1-dev\n  commit id:\"a 3.1.4 fix\"\n  checkout v3.2-dev\n  commit id:\"a 3.2.1 fix\"\n  merge v3.1-dev id:\"merge 3.1.4 fixes before releasing\"\n  checkout v3.3-dev\n  merge v3.2-dev id:\"merge 3.1.4 / 3.2.1 fixes\"\n\n  checkout v3.1-dev\n  branch v3.1.4-rel order:5\n  commit id:\"rename src/oas.md to versions/3.1.4.md\"\n  checkout v3.2-dev\n  branch v3.2.1-rel order:8\n  commit id:\"rename src/oas.md to versions/3.2.1.md\"\n\n  checkout main\n  merge v3.1.4-rel tag:\"3.1.4\"\n  checkout dev\n  merge main id:\"   auto-sync from main\"\n  checkout v3.1-dev\n  merge dev  id:\"   auto-sync from dev\"\n  checkout v3.2-dev\n  merge dev  id:\"   auto-sync from dev \"\n  checkout v3.3-dev\n  merge dev  id:\"   auto-sync from dev  \"\n\n  checkout main\n  merge v3.2.1-rel tag:\"3.2.1\"\n  checkout dev\n  merge main id:\"    auto-sync from main\"\n  checkout v3.1-dev\n  merge dev  id:\"    auto-sync from dev\"\n  checkout v3.2-dev\n  merge dev  id:\"    auto-sync from dev \"\n  checkout v3.3-dev\n  merge dev  id:\"    auto-sync from dev  \"\n\n  checkout v3.2-dev\n  commit id:\"update version in src/oas.md to 3.2.2\"\n  checkout v3.3-dev\n  commit id:\"3.3 work\"\n```\n\n### Branch sync automation\n\nTo keep changes in sync, we have some GitHub actions that open pull requests to take changes from `main` onto the `dev` branch, and from `dev` to each active version branch.\n\n- `sync-main-to-dev` opens a pull request with all the changes from the `main` branch that aren't yet included on `dev`.\n- `sync-dev-to-vX.Y-dev` opens pull requests with all the changes from `dev` that aren't yet included on the corresponding `vX.Y-dev` branch.\n\nThese need a single approval from either maintainers or TSC and can be merged.\nThe aim is to bring build script and repository documentation changes to the other branches.\nPublished versions of the specifications and schemas will also move across branches with this approach.\n\n## Appendix: Issue Automation\n\n### Automated closure of issues Process\n\nIn an effort to keep the list of issues up to date and easier to navigate through, issues get closed automatically when they become inactive.\n\nThis process makes use of the following labels:\n\n* `Needs author feedback`: the issue has been replied to by the triage team and is awaiting a follow up from the issue's author. This label needs to be added manually by people doing triage/experts whenever they reply. It's removed automatically by the workflow.\n* `No recent activity`: the issue hasn't received a reply from its author within the last 10 days since `Needs author feedback` was added and will be closed within 28 days if the author doesn't follow up. This label is added/removed automatically by the workflow.\n* `Needs attention`: The issue's author has replied since the `Needs author feedback` label was set and the triage team will reply as soon as possible. This label needs to be removed manually by people doing triage/experts whenever they reply. It's added automatically by the workflow.\n\n### Automated TDC agenda issues Process\n\nAn issue is opened every week, 7 days in advance, for the Technical Developer Community (TDC), it provides the information to connect the meeting, and serves as a placeholder to build the agenda for the meeting. Anyone is welcome to attend the meeting, or to add items to the agenda as long as they plan on attending to present the item. These issues are also automatically pinned for visibility and labeled with \"Housekeeping\".\n\nTen (10) days after the meeting date is passed (date in the title of the issue), it gets closed and unpinned automatically.\n\n", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/CONTRIBUTING.md"}], "has_build_file": [{"result": {"value": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json", "type": "Url", "format": "package.json"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}], "package_id": [{"result": {"value": "oas-infra", "type": "String"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}], "version": [{"result": {"value": "0.0.0", "type": "Release"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}], "authors": [{"result": {"name": "OpenAPI Initiative TSC", "email": "tsc@openapis.org", "type": "Agent", "value": "OpenAPI Initiative TSC", "url": "https://openapis.org/"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}], "requirements": [{"result": {"value": "cheerio@^1.0.0-rc.5", "name": "cheerio", "version": "^1.0.0-rc.5", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}, {"result": {"value": "highlight.js@^11.11.1", "name": "highlight.js", "version": "^11.11.1", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}, {"result": {"value": "markdown-it@^14.1.0", "name": "markdown-it", "version": "^14.1.0", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}, {"result": {"value": "respec@35.3.1", "name": "respec", "version": "35.3.1", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}, {"result": {"value": "yargs@^17.7.2", "name": "yargs", "version": "^17.7.2", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}, {"result": {"value": "@hyperjump/json-schema@^1.14.0", "name": "@hyperjump/json-schema", "version": "^1.14.0", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}, {"result": {"value": "c8@^10.1.3", "name": "c8", "version": "^10.1.3", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}, {"result": {"value": "markdownlint-cli2@^0.17.2", "name": "markdownlint-cli2", "version": "^0.17.2", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}, {"result": {"value": "vitest@^3.1.3", "name": "vitest", "version": "^3.1.3", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}, {"result": {"value": "yaml@^2.7.1", "name": "yaml", "version": "^2.7.1", "type": "Software_application"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}], "has_package_file": [{"result": {"value": "package.json", "type": "Url"}, "confidence": 1, "technique": "code_parser", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/package.json"}], "readme_url": [{"result": {"value": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/README.md", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "contributors": [{"result": {"value": "* Chuck Heazel [@cmheazel](https://github.com/cmheazel)\n* Darrel Miller [@darrelmiller](https://github.com/darrelmiller)", "type": "File_dump"}, "confidence": 1, "technique": "file_exploration", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/proposals/Alternative-Schema/CONTRIBUTORS.md"}], "has_script_file": [{"result": {"value": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/scripts/adjust-release-branch.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/scripts/fwdabort.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/scripts/fwdport.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/scripts/schema-test-coverage.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/scripts/schema-publish.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}, {"result": {"value": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/scripts/md2html/build.sh", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "continuous_integration": [{"result": {"value": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/.github/workflows/inactive-issues.yml", "type": "Url"}, "confidence": 1, "technique": "file_exploration"}], "application_domain": [{"result": {"type": "String", "value": "Semantic web"}, "confidence": 0.9683189209291069, "technique": "supervised_classification"}], "full_title": [{"result": {"type": "String", "value": "The OpenAPI Specification"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/README.md"}], "documentation": [{"result": {"type": "Url", "value": "https://github.com/OAI/OpenAPI-Specification/wiki", "format": "wiki"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/README.md"}], "images": [{"result": {"type": "Url", "value": "https://avatars3.githubusercontent.com/u/16343502?v=3&amp;s=200"}, "confidence": 1, "technique": "regular_expression", "source": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/README.md"}]}