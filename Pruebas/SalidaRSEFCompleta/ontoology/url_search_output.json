[
    {
        "title": "OnToology, a tool for collaborative development of ontologies",
        "implementation_urls": [],
        "abstract": "ABSTRACTIn this demo we present OnToology, a tool for developing onto-logies collaboratively using Github. OnToology addresses severalsteps of the ontology development lifecycle, including documentation,representation, evaluation and publication in a non-intrusive way.1 INTRODUCTIONThe rise of collaborative technologies has sped up the developmentof software on the last decade. When working as a team, it is com-mon to use repositories for software development, open discussionsand having a ticketing system that warns and keeps track of the mainissues to be solved.This paradigm is slowly moving towards other domains, likeontology development. Ontologies, like software, require a set ofrequirements to be stablished and are usually discussed in a groupbefore agreeing on a design decision. Therefore, they benefit hea-vily from the ticketing system, versioning and decision tracking thatcollaborative environments offer. However, this is often not enough,as ontologies need to be further documented and published online.Although some tools cover part of these activities e.g. documenta-tion and evaluation, there are no tools that integrate them with acollaborative environment.In this demo we present OnToology1 a tool for documenting,evaluating, presenting and publishing ontologies developed col-laboratively. Section 2 describes the requirements for developingontologies collaboratively, while Section 3 describes our approach.Finally Section 4 describes related work and Section 5 introducesour efforts for improving the tool.2 ONTOLOGY DEVELOPMENT LIFE CYCLETypically, the ontology development process can be divided inseveral independent activities:• Ontology requirements: before committing to implement anontology, it is advised to write a set of competency questi-ons (CQs) in an ontology requirements specification documentas mentioned in NeOn methodology (Suárez-Figueroa et al.,2012), which will be used to test the ontology.• Ontology Implementation: once agreed on the ontology requi-rements, one can use an ontology editor such as NeOn-toolkit2or Protégé3 to design the properties and classes of the proposedontology.• Ontology evaluation: the resultant ontology can be evaluatedin two different ways: by checking whether the requirements∗To whom correspondence should be addressed: dgarijo@fi.upm.es1 http://purl.org/net/OnToology2 http://neon-toolkit.org/3 http://protege.stanford.edu/Fig. 1: Ontology development life cycle(i.e., CQs) are answered properly and by checking whether theontology follows design patterns and well stablished practicesfor its implementation or not.• Ontology documentation: an ontology is unlikely to be reused",
        "publication_date": "2015-01-01",
        "authors": "Ahmad Alobaid, Daniel Garijo, María Poveda‐Villalón, Idafen Santana-Pérez, Óscar Corcho",
        "file_name": "20250512001340.pdf",
        "file_path": "../Pruebas/SalidaRSEFCompleta/ontoology/PDFs/20250512001340.pdf",
        "pdf_link": "https://dgarijo.com/papers/ontoology.pdf"
    }
]